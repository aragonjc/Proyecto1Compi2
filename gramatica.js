/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,13],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[5,9,10,28,40,44,45,46,54,69,70],$Vb=[1,30],$Vc=[1,28],$Vd=[1,31],$Ve=[1,32],$Vf=[1,53],$Vg=[1,55],$Vh=[1,46],$Vi=[2,15],$Vj=[1,44],$Vk=[1,45],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,54],$Vs=[1,78],$Vt=[1,67],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[23,26],$Vy=[1,101],$Vz=[1,102],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[1,100],$VP=[14,23,24,26,31,64,65,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,99],$VQ=[1,114],$VR=[5,9,10,14,24,28,36,37,38,39,40,44,45,46,50,53,54,57,58,69,70],$VS=[1,122],$VT=[1,118],$VU=[1,119],$VV=[1,120],$VW=[1,121],$VX=[10,14,28,36,37,38,39,40,44,45,46,50,53,54,69,70],$VY=[57,58],$VZ=[1,141],$V_=[26,99],$V$=[1,167],$V01=[1,166],$V11=[14,24,26],$V21=[11,12,14,23,24,26],$V31=[14,23,24,26,31,75,76,81,82,83,84,85,86,87,88,90,99],$V41=[14,23,24,26,31,75,76,77,78,80,81,82,83,84,85,86,87,88,90,99],$V51=[14,23,24,26,31,81,82,83,84,85,86,87,88,90,99],$V61=[1,199],$V71=[5,9,10,14,28,36,37,38,39,40,44,45,46,50,53,54,69,70],$V81=[1,214],$V91=[2,41],$Va1=[1,222],$Vb1=[14,50,53];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Bloque":4,"EOF":5,"Instruccion":6,"llamadaFuncion":7,"variables":8,"Type":9,"id":10,"igual":11,"curlyBraceOpen":12,"parsObj":13,"curlyBraceClose":14,"funciones":15,"IF":16,"WHILE":17,"DOWHILE":18,"SWITCH":19,"FOR":20,"bracketOpen":21,"paramFunc":22,"bracketClose":23,"semicolon":24,"paramFuncList":25,"comma":26,"exp":27,"function":28,"funcParam":29,"funcDec":30,"dosPuntos":31,"types":32,"STMT":33,"funcParamList":34,"InstruccionI":35,"llamadFuncion":36,"Break":37,"Continue":38,"return":39,"if":40,"IFLAST":41,"else":42,"IFCOND":43,"while":44,"do":45,"switch":46,"FIRSTCASE":47,"LASTCASE":48,"CASE":49,"case":50,"DEFCASE":51,"ENDCASE":52,"default":53,"for":54,"forDec":55,"forOP":56,"in":57,"of":58,"defType":59,"defLast":60,"asignLast":61,"point":62,"asignLastF":63,"increment":64,"decrement":65,"objType":66,"opkv":67,"keyvalueT":68,"let":69,"const":70,"number":71,"boolean":72,"string":73,"void":74,"mas":75,"menos":76,"por":77,"division":78,"potencia":79,"modulo":80,"mayorque":81,"menorque":82,"mayorigualque":83,"menorigualque":84,"igualdad":85,"diferencia":86,"and":87,"or":88,"not":89,"question":90,"NUMBER":91,"STRING":92,"true":93,"false":94,"null":95,"undefined":96,"sqBracketOpen":97,"arrParam":98,"sqBracketClose":99,"objetoParam":100,"listArrParam":101,"objetoParamList":102,"keyvalue":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"Type",10:"id",11:"igual",12:"curlyBraceOpen",14:"curlyBraceClose",21:"bracketOpen",23:"bracketClose",24:"semicolon",26:"comma",28:"function",31:"dosPuntos",36:"llamadFuncion",37:"Break",38:"Continue",39:"return",40:"if",42:"else",44:"while",45:"do",46:"switch",50:"case",53:"default",54:"for",57:"in",58:"of",62:"point",64:"increment",65:"decrement",69:"let",70:"const",71:"number",72:"boolean",73:"string",74:"void",75:"mas",76:"menos",77:"por",78:"division",79:"potencia",80:"modulo",81:"mayorque",82:"menorque",83:"mayorigualque",84:"menorigualque",85:"igualdad",86:"diferencia",87:"and",88:"or",89:"not",90:"question",91:"NUMBER",92:"STRING",93:"true",94:"false",95:"null",96:"undefined",97:"sqBracketOpen",99:"sqBracketClose"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,6],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[22,1],[22,0],[25,3],[25,1],[15,6],[30,5],[30,3],[29,1],[29,0],[34,5],[34,3],[33,2],[33,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,2],[35,3],[16,8],[41,2],[41,0],[43,8],[43,3],[17,7],[18,9],[19,8],[47,1],[47,0],[49,5],[49,4],[48,2],[51,3],[52,1],[52,0],[20,11],[20,9],[56,1],[56,1],[55,1],[55,1],[8,4],[8,3],[61,3],[61,1],[63,2],[63,1],[63,1],[13,1],[13,0],[66,3],[66,1],[67,1],[67,1],[68,3],[59,1],[59,1],[60,4],[60,2],[60,0],[32,1],[32,1],[32,1],[32,1],[32,1],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,5],[27,2],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,3],[27,1],[27,4],[27,3],[27,3],[98,1],[98,0],[101,3],[101,1],[100,1],[100,0],[102,3],[102,1],[103,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
this.$=$$[$0-1] + $$[$0];
break;
case 3:
 this.$=$$[$0]; 
break;
case 4: case 5: case 7: case 8: case 9: case 10: case 11: case 12:
 this.$ = $$[$0] + "\n"; 
break;
case 6:
 this.$ = $$[$0-5] + " " + $$[$0-4] +" "+ $$[$0-3] + " "+ $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0] + "\n\n";
break;
case 13:
 this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] +$$[$0-1] +$$[$0]; 
break;
case 14: case 17: case 68: case 71: case 72: case 73:
this.$ = $$[$0];
break;
case 15: case 69: case 117:
this.$ = "";
break;
case 16:
this.$ = $$[$0-2] + $$[$0-1] + " " + $$[$0];
break;
case 61:
 this.$ = new Variable(0,0,$$[$0-3],$$[$0-2],); 
break;
case 66: case 67:
 this.$ = $$[$0]; 
break;
case 70:
this.$ = $$[$0-2] + $$[$0-1] + "\n" + $$[$0];
break;
case 74:
 this.$ = "\t" + $$[$0-2] + $$[$0-1] + " "+ $$[$0]; 
break;
case 75: case 76:
 this.$ = String($$[$0]); 
break;
case 80: case 81: case 82: case 83: case 84:
 this.$ = $$[$0];
break;
case 85: case 86: case 87: case 88: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 101:
 this.$ = String($$[$0-2] + $$[$0-1] + $$[$0]); 
break;
case 89: case 100: case 103: case 104:
 this.$ = String($$[$0-1] + $$[$0]); 
break;
case 102:
 this.$ = String($$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]); 
break;
case 105: case 106: case 107: case 108: case 109: case 110: case 112:
 this.$ = String($$[$0]);
break;
case 111:
this.$ = String($$[$0-2] + $$[$0-1] + $$[$0]);
break;
case 124:
 this.$ = String($$[$0-2]+$$[$0-1]+$$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,10:$V1,15:7,16:8,17:9,18:10,19:11,20:12,28:$V2,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{1:[3]},{5:[1,23],6:24,7:4,8:5,9:$V0,10:$V1,15:7,16:8,17:9,18:10,19:11,20:12,28:$V2,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),{10:[1,25]},o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),{11:$Vb,21:[1,26],61:27,62:$Vc,63:29,64:$Vd,65:$Ve},{10:[1,33]},{10:[1,34]},{21:[1,35]},{21:[1,36]},{12:[1,37]},{21:[1,38]},{21:[1,39]},{10:[2,75]},{10:[2,76]},{1:[2,1]},o($Va,[2,2]),{11:[1,40]},{10:$Vf,12:$Vg,21:$Vh,22:41,23:$Vi,25:42,27:43,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{24:[1,56]},{10:[1,57]},{24:[2,64]},{10:$Vf,12:$Vg,21:$Vh,27:58,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{24:[2,66]},{24:[2,67]},{11:[1,61],24:[2,79],31:[1,60],60:59},{21:[1,62]},{10:$Vf,12:$Vg,21:$Vh,27:63,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:64,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{8:68,10:$Vs,15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,33:65,35:66,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{10:$Vf,12:$Vg,21:$Vh,27:79,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{8:80,10:[1,82],55:81,59:14,69:$V8,70:$V9},{12:[1,83]},{23:[1,84]},{23:[2,14],26:[1,85]},o($Vx,[2,17],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO}),{10:$Vf,12:$Vg,21:$Vh,27:103,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:104,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:105,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},o($VP,[2,105]),o($VP,[2,106]),o($VP,[2,107]),o($VP,[2,108]),o($VP,[2,109]),o($VP,[2,110]),o($VP,[2,112],{21:[1,107],62:[1,106]}),{10:$Vf,12:$Vg,21:$Vh,27:110,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr,98:108,99:[2,117],101:109},{10:$VQ,14:[2,121],100:111,102:112,103:113},o($VR,[2,62]),{11:$Vb,63:115,64:$Vd,65:$Ve},{24:[2,65],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},{24:[1,116]},{10:$VS,32:117,71:$VT,72:$VU,73:$VV,74:$VW},{10:$Vf,12:$Vg,21:$Vh,27:123,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:[1,126],23:[2,22],29:124,34:125},{23:[1,127],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},{23:[1,128],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},{8:68,10:$Vs,14:[1,129],15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,35:130,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},o($VX,[2,26]),o($VX,[2,27]),o($VX,[2,28]),o($VX,[2,29]),o($VX,[2,30]),o($VX,[2,31]),o($VX,[2,32]),o($VX,[2,33]),o($VX,[2,34]),o($VX,[2,35]),o($VX,[2,36]),{10:$Vf,12:$Vg,21:$Vh,24:[1,131],27:132,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{11:$Vb,61:27,62:$Vc,63:29,64:$Vd,65:$Ve},{23:[1,133],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},o($VY,[2,59],{24:[1,134]}),{56:135,57:[1,136],58:[1,137]},o($VY,[2,60],{61:27,63:29,11:$Vb,62:$Vc,64:$Vd,65:$Ve}),{10:$VZ,13:138,14:[2,69],66:139,68:140},{24:[1,142]},{10:$Vf,12:$Vg,21:$Vh,27:143,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:144,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:145,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:146,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:147,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:148,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:149,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:150,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:151,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:152,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:153,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:154,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:155,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:156,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:157,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:158,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},o($VP,[2,103]),o($VP,[2,104]),o($VP,[2,89]),o($VP,[2,100]),{23:[1,159],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},{10:[1,160]},{10:$Vf,12:$Vg,21:$Vh,22:161,23:$Vi,25:42,27:43,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{99:[1,162]},{26:[1,163],99:[2,116]},o($V_,[2,119],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO}),{14:[1,164]},{14:[2,120],24:$V$,26:$V01,67:165},o($V11,[2,123]),{31:[1,168]},{24:[2,63]},o($VR,[2,61]),{11:[1,169]},o($V21,[2,80]),o($V21,[2,81]),o($V21,[2,82]),o($V21,[2,83]),o($V21,[2,84]),{24:[2,78],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},{23:[1,170]},{23:[2,21],26:[1,171]},{31:[1,172]},{12:[1,173]},{12:[1,174]},{44:[1,175]},o($VX,[2,25]),o($VX,[2,37]),{24:[1,176],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},{12:[1,177]},{10:$Vf,12:$Vg,21:$Vh,27:178,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:[1,179]},{10:[2,57]},{10:[2,58]},{14:[1,180]},{14:[2,68],24:$V$,26:$V01,67:181},o($V11,[2,71]),{31:[1,182]},o($Va,[2,13]),o($Vx,[2,16],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO}),o($V31,[2,85],{64:$Vy,65:$Vz,77:$VC,78:$VD,79:$VE,80:$VF}),o($V31,[2,86],{64:$Vy,65:$Vz,77:$VC,78:$VD,79:$VE,80:$VF}),o($V41,[2,87],{64:$Vy,65:$Vz,79:$VE}),o($V41,[2,88],{64:$Vy,65:$Vz,79:$VE}),o($VP,[2,90]),o($V41,[2,91],{64:$Vy,65:$Vz,79:$VE}),o($V51,[2,92],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),o($V51,[2,93],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),o($V51,[2,94],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),o($V51,[2,95],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),o($V51,[2,96],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),o($V51,[2,97],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF}),o([14,23,24,26,31,87,88,90,99],[2,98],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL}),o([14,23,24,26,31,88,90,99],[2,99],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM}),{31:[1,183],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},o($VP,[2,101]),o($VP,[2,111]),{23:[1,184]},o($VP,[2,114]),{10:$Vf,12:$Vg,21:$Vh,27:185,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},o($VP,[2,115]),{10:$VQ,103:186},{10:[2,72]},{10:[2,73]},{10:$Vf,12:$Vg,21:$Vh,27:187,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:188,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{12:[1,191],30:189,31:[1,190]},{10:[1,192]},{10:$VS,32:193,71:$VT,72:$VU,73:$VV,74:$VW},{8:68,10:$Vs,15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,33:194,35:66,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{8:68,10:$Vs,15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,33:195,35:66,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{21:[1,196]},o($VX,[2,38]),{47:197,49:198,50:$V61,53:[2,48]},{24:[1,200],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},{23:[1,201]},o($Va,[2,6]),{10:$VZ,68:202},{10:$VS,32:203,71:$VT,72:$VU,73:$VV,74:$VW},{10:$Vf,12:$Vg,21:$Vh,27:204,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},o($VP,[2,113]),o($V_,[2,118],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO}),o($V11,[2,122]),o($V11,[2,124],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO}),{24:[2,77],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},o($V71,[2,18]),{10:$VS,32:205,71:$VT,72:$VU,73:$VV,74:$VW},{8:68,10:$Vs,15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,33:206,35:66,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{31:[1,207]},o($Vx,[2,24]),{8:68,10:$Vs,14:[1,208],15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,35:130,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{8:68,10:$Vs,14:[1,209],15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,35:130,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{10:$Vf,12:$Vg,21:$Vh,27:210,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{48:211,51:212,53:[1,213]},{50:$V81,53:[2,47]},{10:$Vf,12:$Vg,21:$Vh,27:215,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{10:$Vf,12:$Vg,21:$Vh,27:216,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{12:[1,217]},o($V11,[2,70]),o($V11,[2,74]),o([14,23,24,26,31,99],[2,102],{64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO}),{12:[1,218]},{8:68,10:$Vs,14:[1,219],15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,35:130,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{10:$VS,32:220,71:$VT,72:$VU,73:$VV,74:$VW},o($V71,$V91,{41:221,42:$Va1}),o($V71,[2,44]),{23:[1,223],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},{14:[1,224]},{14:[2,54],49:226,50:$V61,52:225},{31:[1,227]},{10:$Vf,12:$Vg,21:$Vh,27:228,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{31:[1,229],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},{23:[1,230],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},{8:68,10:$Vs,15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,33:231,35:66,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{8:68,10:$Vs,15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,33:232,35:66,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},o($V71,[2,20]),o($Vx,[2,23]),o($V71,[2,39]),{12:[1,235],40:[1,234],43:233},{24:[1,236]},o($V71,[2,46]),{14:[2,51]},{14:[2,53],50:$V81},{8:68,10:$Vs,15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,33:237,35:66,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{31:[1,238],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},{8:68,10:$Vs,15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,33:239,35:66,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{12:[1,240]},{8:68,10:$Vs,14:[1,241],15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,35:130,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{8:68,10:$Vs,14:[1,242],15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,35:130,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},o($V71,[2,40]),{21:[1,243]},{8:68,10:$Vs,15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,33:244,35:66,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},o($V71,[2,45]),o([14,50],[2,52],{59:14,8:68,15:69,16:70,17:71,18:72,19:73,20:74,35:130,10:$Vs,28:$V2,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,69:$V8,70:$V9}),{8:68,10:$Vs,15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,33:245,35:66,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},o($Vb1,[2,50],{59:14,8:68,15:69,16:70,17:71,18:72,19:73,20:74,35:130,10:$Vs,28:$V2,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,69:$V8,70:$V9}),{8:68,10:$Vs,15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,33:246,35:66,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},o($V71,[2,56]),o($V71,[2,19]),{10:$Vf,12:$Vg,21:$Vh,27:247,76:$Vj,89:$Vk,91:$Vl,92:$Vm,93:$Vn,94:$Vo,95:$Vp,96:$Vq,97:$Vr},{8:68,10:$Vs,14:[1,248],15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,35:130,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},o($Vb1,[2,49],{59:14,8:68,15:69,16:70,17:71,18:72,19:73,20:74,35:130,10:$Vs,28:$V2,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,69:$V8,70:$V9}),{8:68,10:$Vs,14:[1,249],15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,35:130,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{23:[1,250],64:$Vy,65:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,90:$VO},o($V71,[2,43]),o($V71,[2,55]),{12:[1,251]},{8:68,10:$Vs,15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,33:252,35:66,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},{8:68,10:$Vs,14:[1,253],15:69,16:70,17:71,18:72,19:73,20:74,28:$V2,35:130,36:$Vt,37:$Vu,38:$Vv,39:$Vw,40:$V3,44:$V4,45:$V5,46:$V6,54:$V7,59:14,69:$V8,70:$V9},o($V71,$V91,{41:254,42:$Va1}),o($V71,[2,42])],
defaultActions: {21:[2,75],22:[2,76],23:[2,1],29:[2,64],31:[2,66],32:[2,67],115:[2,63],136:[2,57],137:[2,58],166:[2,72],167:[2,73],225:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const callFunction = require('./callFunction.js');
    const TObject = require('./TObject.js');
	const Operation = require('./Operation.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 38;
break;
case 1:return 37;
break;
case 2:return 95;
break;
case 3:return 9;
break;
case 4:return 70;
break;
case 5:return 69;
break;
case 6:return 70;
break;
case 7:return 28;
break;
case 8:return 40;
break;
case 9:return 42;
break;
case 10:return 44;
break;
case 11:return 45;
break;
case 12:return 46;
break;
case 13:return 50;
break;
case 14:return 53;
break;
case 15:return 54;
break;
case 16:return 57;
break;
case 17:return 58;
break;
case 18:return 71;
break;
case 19:return 72;
break;
case 20:return 73;
break;
case 21:return 74;
break;
case 22:return 93;
break;
case 23:return 94;
break;
case 24:return 96;
break;
case 25:return 12;
break;
case 26:return 14;
break;
case 27:return 21;
break;
case 28:return 23;
break;
case 29:return 26;
break;
case 30:return 24;
break;
case 31:return 31;
break;
case 32:return 62;
break;
case 33:return 64;
break;
case 34:return 65;
break;
case 35:return 75;
break;
case 36:return 76;
break;
case 37:return 79;
break;
case 38:return 77;
break;
case 39:return 78;
break;
case 40:return 80;
break;
case 41:return 83;
break;
case 42:return 84;
break;
case 43:return 81;
break;
case 44:return 82;
break;
case 45:return 85;
break;
case 46:return 11;
break;
case 47:return 86;
break;
case 48:return 87;
break;
case 49:return 88;
break;
case 50:return 89;
break;
case 51:return 90;
break;
case 52:return 97;
break;
case 53:return 99;
break;
case 54:
break;
case 55:
break;
case 56:return 91;
break;
case 57:return 92;
break;
case 58:return 10;
break;
case 59:return 5;
break;
case 60: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:continue\b)/,/^(?:break\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:([a-zA-Z$_])[a-zA-Z0-9_$]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}