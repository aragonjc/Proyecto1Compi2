/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,13],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[5,9,10,30,42,47,48,49,57,77,78],$Vb=[1,31],$Vc=[2,15],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[2,14],$Vk=[1,48],$Vl=[5,9,10,14,25,30,38,39,40,42,47,48,49,53,56,57,60,61,77,78],$Vm=[1,62],$Vn=[1,52],$Vo=[1,55],$Vp=[1,53],$Vq=[1,54],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,63],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[2,17],$VC=[2,132],$VD=[5,9,10,14,24,25,28,30,38,39,40,42,47,48,49,53,56,57,60,61,77,78,108],$VE=[1,112],$VF=[1,113],$VG=[1,97],$VH=[1,98],$VI=[1,99],$VJ=[1,100],$VK=[1,101],$VL=[1,102],$VM=[1,103],$VN=[1,104],$VO=[1,105],$VP=[1,106],$VQ=[1,107],$VR=[1,108],$VS=[1,109],$VT=[1,110],$VU=[1,111],$VV=[1,117],$VW=[5,9,10,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,60,61,72,73,77,78,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,108],$VX=[2,134],$VY=[1,133],$VZ=[1,129],$V_=[1,130],$V$=[1,131],$V01=[1,132],$V11=[10,14,30,38,39,40,42,47,48,49,53,56,57,77,78],$V21=[60,61],$V31=[1,154],$V41=[24,28],$V51=[5,9,10,14,22,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,60,61,66,72,73,77,78,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,108],$V61=[1,175],$V71=[1,174],$V81=[14,25,28],$V91=[28,108],$Va1=[11,12,14,24,25,28],$Vb1=[5,9,10,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,60,61,77,78,84,85,90,91,92,93,94,95,96,97,99,108],$Vc1=[5,9,10,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,60,61,77,78,84,85,86,87,89,90,91,92,93,94,95,96,97,99,108],$Vd1=[5,9,10,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,60,61,77,78,90,91,92,93,94,95,96,97,99,108],$Ve1=[1,218],$Vf1=[5,9,10,14,30,38,39,40,42,47,48,49,53,56,57,77,78],$Vg1=[1,236],$Vh1=[2,44],$Vi1=[1,246],$Vj1=[5,9,10,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,60,61,72,73,77,78,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,106,108],$Vk1=[14,53,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Bloque":4,"EOF":5,"Instruccion":6,"llamadaFuncion":7,"variables":8,"Type":9,"id":10,"igual":11,"curlyBraceOpen":12,"parsObj":13,"curlyBraceClose":14,"funciones":15,"IF":16,"WHILE":17,"DOWHILE":18,"SWITCH":19,"FOR":20,"PL":21,"bracketOpen":22,"paramFunc":23,"bracketClose":24,"semicolon":25,"POI":26,"paramFuncList":27,"comma":28,"E":29,"function":30,"funcParam":31,"funcDec":32,"dosPuntos":33,"types":34,"STMT":35,"funcParamList":36,"InstruccionI":37,"Break":38,"Continue":39,"return":40,"OP":41,"if":42,"exp":43,"IFLAST":44,"else":45,"IFCOND":46,"while":47,"do":48,"switch":49,"FIRSTCASE":50,"LASTCASE":51,"CASE":52,"case":53,"DEFCASE":54,"ENDCASE":55,"default":56,"for":57,"forDec":58,"forOP":59,"in":60,"of":61,"defType":62,"defLast":63,"asignLast":64,"scNot":65,"point":66,"asignLastF":67,"masIgual":68,"menosIgual":69,"porIgual":70,"divisionIgual":71,"increment":72,"decrement":73,"objType":74,"opkv":75,"keyvalueT":76,"let":77,"const":78,"number":79,"boolean":80,"string":81,"void":82,"objetoParam":83,"mas":84,"menos":85,"por":86,"division":87,"potencia":88,"modulo":89,"mayorque":90,"menorque":91,"mayorigualque":92,"menorigualque":93,"igualdad":94,"diferencia":95,"and":96,"or":97,"not":98,"question":99,"NUMBER":100,"STRING":101,"true":102,"false":103,"null":104,"undefined":105,"sqBracketOpen":106,"arrParam":107,"sqBracketClose":108,"sqBCKFIN":109,"sqBckList":110,"listArrParam":111,"objetoParamList":112,"keyvalue":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"Type",10:"id",11:"igual",12:"curlyBraceOpen",14:"curlyBraceClose",22:"bracketOpen",24:"bracketClose",25:"semicolon",28:"comma",30:"function",33:"dosPuntos",38:"Break",39:"Continue",40:"return",42:"if",45:"else",47:"while",48:"do",49:"switch",53:"case",56:"default",57:"for",60:"in",61:"of",66:"point",68:"masIgual",69:"menosIgual",70:"porIgual",71:"divisionIgual",72:"increment",73:"decrement",77:"let",78:"const",79:"number",80:"boolean",81:"string",82:"void",84:"mas",85:"menos",86:"por",87:"division",88:"potencia",89:"modulo",90:"mayorque",91:"menorque",92:"mayorigualque",93:"menorigualque",94:"igualdad",95:"diferencia",96:"and",97:"or",98:"not",99:"question",100:"NUMBER",101:"STRING",102:"true",103:"false",104:"null",105:"undefined",106:"sqBracketOpen",108:"sqBracketClose"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,6],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,6],[21,1],[21,0],[23,1],[23,0],[27,3],[27,1],[15,6],[32,5],[32,3],[31,1],[31,0],[36,5],[36,3],[35,2],[35,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,2],[41,2],[41,1],[16,8],[44,2],[44,0],[46,8],[46,3],[17,7],[18,9],[19,8],[50,1],[50,0],[52,5],[52,4],[51,2],[54,3],[55,1],[55,0],[20,11],[20,9],[59,1],[59,1],[58,1],[58,1],[8,4],[8,3],[8,2],[65,1],[65,0],[64,3],[64,1],[67,2],[67,2],[67,2],[67,2],[67,2],[67,1],[67,1],[13,1],[13,0],[74,3],[74,1],[75,1],[75,1],[76,3],[62,1],[62,1],[63,4],[63,2],[63,0],[34,1],[34,1],[34,1],[34,1],[34,1],[29,1],[29,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,5],[43,2],[43,2],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,2],[43,1],[43,5],[43,4],[109,1],[109,0],[110,4],[110,3],[26,3],[26,2],[107,1],[107,0],[111,3],[111,1],[83,1],[83,0],[112,3],[112,1],[113,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 27:
this.$=$$[$0-1] + $$[$0];
break;
case 3: case 28:
 this.$=$$[$0]; 
break;
case 4: case 5: case 7: case 8: case 9: case 10: case 11: case 12: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36:
 this.$ = $$[$0] + "\n"; 
break;
case 6:
 this.$ = $$[$0-5] + " " + $$[$0-4] +" "+ $$[$0-3] + " "+ $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0] + "\n\n";
break;
case 13:
 this.$ = $$[$0-5] + $$[$0-4] + $$[$0-3] +$$[$0-2] +$$[$0-1]; 
break;
case 16: case 19: case 78: case 81: case 82: case 83:
this.$ = $$[$0];
break;
case 17: case 68: case 79: case 134:
this.$ = "";
break;
case 18:
this.$ = $$[$0-2] + $$[$0-1] + " " + $$[$0];
break;
case 39:
 this.$ = $$[$0-1] + " " + $$[$0];
break;
case 42:
 this.$ = $$[$0-7] + " " + $$[$0-6] + $$[$0-5] + $$[$0-4] + " " + $$[$0-3] + "\n" + $$[$0-2] + "\n" + $$[$0-1] + $$[$0]; 
break;
case 43: case 88:
 this.$ = " " + $$[$0-1] + " " + $$[$0]; 
break;
case 44:
 this.$ = "\n\n"; 
break;
case 45:
 this.$ = $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + " " + $$[$0-3] + "\n" + $$[$0-2] + "\n" + $$[$0-1] + $$[$0];  
break;
case 46:
 this.$ = $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0] + "\n";
break;
case 64:
 this.$ = $$[$0-3] + " " + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 65: case 69: case 131:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 66: case 132:
 this.$ = $$[$0-1] + $$[$0];
break;
case 67:
this.$=$$[$0];
break;
case 70: case 76: case 77: case 95: case 137:
 this.$ = $$[$0]; 
break;
case 71:
 this.$ = " " + $$[$0-1] + " " + $$[$0];
break;
case 80:
this.$ = $$[$0-2] + $$[$0-1] + "\n" + $$[$0];
break;
case 84:
 this.$ = "\t" + $$[$0-2] + $$[$0-1] + " "+ $$[$0]; 
break;
case 85: case 86:
 this.$ = String($$[$0]); 
break;
case 87:
 this.$ = $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0]
break;
case 89:
 this.$ = ""; 
break;
case 90: case 91: case 92: case 93: case 94:
 this.$ = $$[$0];
break;
case 96:
 this.$ = " " + $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0]
break;
case 97: case 98: case 99: case 100: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 113:
 this.$ = String($$[$0-2] + $$[$0-1] + $$[$0]); 
break;
case 101: case 112: case 115: case 116:
 this.$ = String($$[$0-1] + $$[$0]); 
break;
case 114:
 this.$ = String($$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]); 
break;
case 117: case 118: case 119: case 120: case 121: case 122: case 124:
 this.$ = String($$[$0]);
break;
case 123:
this.$ = String($$[$0-1] + $$[$0]);
break;
case 138:
this.$="\n";
break;
case 139:
 this.$ = $$[$0-2] + $$[$0-1] + "\n" +$$[$0]; 
break;
case 141:
 this.$ = "\t" + $$[$0-2] + " " + $$[$0-1] + $$[$0]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,10:$V1,15:7,16:8,17:9,18:10,19:11,20:12,30:$V2,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{1:[3]},{5:[1,23],6:24,7:4,8:5,9:$V0,10:$V1,15:7,16:8,17:9,18:10,19:11,20:12,30:$V2,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),{10:[1,25]},o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),{11:$Vb,21:26,22:$Vc,26:28,64:27,66:[1,29],67:30,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi},{10:[1,38]},{10:[1,39]},{22:[1,40]},{22:[1,41]},{12:[1,42]},{22:[1,43]},{22:[1,44]},{10:[2,85]},{10:[2,86]},{1:[2,1]},o($Va,[2,2]),{11:[1,45]},{22:[1,46]},o([5,9,10,14,30,38,39,40,42,47,48,49,53,56,57,60,61,77,78],[2,66],{25:[1,47]}),{22:$Vj,66:$Vk},{10:[1,49]},o($Vl,[2,70]),{10:$Vm,12:$Vn,22:$Vo,29:50,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,12:$Vn,22:$Vo,29:64,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,12:$Vn,22:$Vo,29:65,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,12:$Vn,22:$Vo,29:66,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,12:$Vn,22:$Vo,29:67,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},o($Vl,[2,76]),o($Vl,[2,77]),{11:[1,70],25:[2,89],33:[1,69],63:68},{22:[1,71]},{10:$Vm,22:$Vo,43:72,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:73,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{7:76,8:77,10:$V1,15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,35:74,37:75,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{10:$Vm,22:$Vo,43:87,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{8:88,10:[1,90],58:89,62:14,77:$V8,78:$V9},{12:[1,91]},{10:$Vm,12:$Vn,22:$Vo,23:92,24:$VB,27:93,29:94,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},o($Vl,[2,65]),{10:[1,95]},o([22,66],$VC,{67:96,11:$Vb,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi}),o($Vl,[2,71]),o($VD,[2,95],{72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU}),{10:$VV,14:[2,138],83:114,112:115,113:116},{10:$Vm,22:$Vo,43:118,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:119,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:120,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},o($VW,[2,117]),o($VW,[2,118]),o($VW,[2,119]),o($VW,[2,120]),o($VW,[2,121]),o($VW,[2,122]),o($VW,[2,124],{26:121,21:122,22:$Vc,66:[1,123]}),{10:$Vm,12:$Vn,22:$Vo,29:126,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:124,108:$VX,111:125},o($Vl,[2,72]),o($Vl,[2,73]),o($Vl,[2,74]),o($Vl,[2,75]),{25:[1,127]},{10:$VY,34:128,79:$VZ,80:$V_,81:$V$,82:$V01},{10:$Vm,12:$Vn,22:$Vo,29:134,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:[1,137],24:[2,24],31:135,36:136},{24:[1,138],72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU},{24:[1,139],72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU},{7:76,8:77,10:$V1,14:[1,140],15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,37:141,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},o($V11,[2,28]),o($V11,[2,29]),o($V11,[2,30]),o($V11,[2,31]),o($V11,[2,32]),o($V11,[2,33]),o($V11,[2,34]),o($V11,[2,35]),o($V11,[2,36]),o($V11,[2,37]),o($V11,[2,38]),{10:$Vm,12:$Vn,22:$Vo,25:[1,144],29:143,41:142,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{24:[1,145],72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU},o($V21,[2,62],{25:[1,146]}),{59:147,60:[1,148],61:[1,149]},o($V21,[2,63],{64:27,67:30,11:$Vb,66:[1,150],68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi}),{10:$V31,13:151,14:[2,79],74:152,76:153},{24:[1,155]},{24:[2,16],28:[1,156]},o($V41,[2,19]),o($V51,[2,131]),o($Vl,[2,69]),{10:$Vm,22:$Vo,43:157,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:158,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:159,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:160,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:161,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:162,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:163,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:164,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:165,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:166,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:167,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:168,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:169,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:170,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:171,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},o($VW,[2,115]),o($VW,[2,116]),{14:[1,172]},{14:[2,137],25:$V61,28:$V71,75:173},o($V81,[2,140]),{33:[1,176]},o($VW,[2,101]),o($VW,[2,112]),{24:[1,177],72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU},o($VW,[2,123],{22:$Vj,66:$Vk}),{22:[1,178]},{10:[1,179]},{108:[1,180]},{28:[1,181],108:[2,133]},o($V91,[2,136]),o($Vl,[2,64]),{11:[1,182]},o($Va1,[2,90]),o($Va1,[2,91]),o($Va1,[2,92]),o($Va1,[2,93]),o($Va1,[2,94]),{25:[2,88]},{24:[1,183]},{24:[2,23],28:[1,184]},{33:[1,185]},{12:[1,186]},{12:[1,187]},{47:[1,188]},o($V11,[2,27]),o($V11,[2,39]),{25:[1,189]},o($V11,[2,41]),{12:[1,190]},{10:$Vm,22:$Vo,43:191,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:[1,192]},{10:[2,60]},{10:[2,61]},{10:[1,193]},{14:[1,194]},{14:[2,78],25:$V61,28:$V71,75:195},o($V81,[2,81]),{33:[1,196]},{25:[1,197]},{10:$Vm,12:$Vn,22:$Vo,29:198,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},o($Vb1,[2,97],{72:$VE,73:$VF,86:$VI,87:$VJ,88:$VK,89:$VL}),o($Vb1,[2,98],{72:$VE,73:$VF,86:$VI,87:$VJ,88:$VK,89:$VL}),o($Vc1,[2,99],{72:$VE,73:$VF,88:$VK}),o($Vc1,[2,100],{72:$VE,73:$VF,88:$VK}),o($VW,[2,102]),o($Vc1,[2,103],{72:$VE,73:$VF,88:$VK}),o($Vd1,[2,104],{72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL}),o($Vd1,[2,105],{72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL}),o($Vd1,[2,106],{72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL}),o($Vd1,[2,107],{72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL}),o($Vd1,[2,108],{72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL}),o($Vd1,[2,109],{72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL}),o([5,9,10,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,60,61,77,78,96,97,99,108],[2,110],{72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR}),o([5,9,10,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,60,61,77,78,97,99,108],[2,111],{72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS}),{33:[1,199],72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU},o($VD,[2,96]),{10:$VV,113:200},{10:[2,82]},{10:[2,83]},{10:$Vm,12:$Vn,22:$Vo,29:201,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},o($VW,[2,113]),{10:$Vm,12:$Vn,22:$Vo,23:202,24:$VB,27:93,29:94,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},o($V51,$VC),o($VW,[2,128],{109:203,110:204,106:[1,205]}),{10:$Vm,12:$Vn,22:$Vo,29:206,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,12:$Vn,22:$Vo,29:207,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{12:[1,210],32:208,33:[1,209]},{10:[1,211]},{10:$VY,34:212,79:$VZ,80:$V_,81:$V$,82:$V01},{7:76,8:77,10:$V1,15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,35:213,37:75,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{7:76,8:77,10:$V1,15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,35:214,37:75,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{22:[1,215]},o($V11,[2,40]),{50:216,52:217,53:$Ve1,56:[2,51]},{25:[1,219],72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU},{24:[1,220]},{11:$Vb,67:96,68:$Vd,69:$Ve,70:$Vf,71:$Vg,72:$Vh,73:$Vi},o($Va,[2,6]),{10:$V31,76:221},{10:$VY,34:222,79:$VZ,80:$V_,81:$V$,82:$V01},o($Vf1,[2,13]),o($V41,[2,18]),{10:$Vm,22:$Vo,43:223,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},o($V81,[2,139]),o($V81,[2,141]),{24:[1,224]},o($VW,[2,126]),o($VW,[2,127],{106:[1,225]}),{10:$Vm,12:$Vn,22:$Vo,29:126,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:226,108:$VX,111:125},o($V91,[2,135]),{25:[2,87]},o($Vf1,[2,20]),{10:$VY,34:227,79:$VZ,80:$V_,81:$V$,82:$V01},{7:76,8:77,10:$V1,15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,35:228,37:75,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{33:[1,229]},o($V41,[2,26]),{7:76,8:77,10:$V1,14:[1,230],15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,37:141,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{7:76,8:77,10:$V1,14:[1,231],15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,37:141,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{10:$Vm,22:$Vo,43:232,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{51:233,54:234,56:[1,235]},{53:$Vg1,56:[2,50]},{10:$Vm,22:$Vo,43:237,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{10:$Vm,22:$Vo,43:238,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{12:[1,239]},o($V81,[2,80]),o($V81,[2,84]),o([5,9,10,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,60,61,77,78,108],[2,114],{72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU}),o($VW,[2,125]),{10:$Vm,12:$Vn,22:$Vo,29:126,43:51,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:240,108:$VX,111:125},{108:[1,241]},{12:[1,242]},{7:76,8:77,10:$V1,14:[1,243],15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,37:141,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{10:$VY,34:244,79:$VZ,80:$V_,81:$V$,82:$V01},o($Vf1,$Vh1,{44:245,45:$Vi1}),o($Vf1,[2,47]),{24:[1,247],72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU},{14:[1,248]},{14:[2,57],52:250,53:$Ve1,55:249},{33:[1,251]},{10:$Vm,22:$Vo,43:252,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{33:[1,253],72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU},{24:[1,254],72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU},{7:76,8:77,10:$V1,15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,35:255,37:75,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{108:[1,256]},o($Vj1,[2,130]),{7:76,8:77,10:$V1,15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,35:257,37:75,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},o($Vf1,[2,22]),o($V41,[2,25]),o($Vf1,[2,42]),{12:[1,260],42:[1,259],46:258},{25:[1,261]},o($Vf1,[2,49]),{14:[2,54]},{14:[2,56],53:$Vg1},{7:76,8:77,10:$V1,15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,35:262,37:75,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{33:[1,263],72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU},{7:76,8:77,10:$V1,15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,35:264,37:75,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{12:[1,265]},{7:76,8:77,10:$V1,14:[1,266],15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,37:141,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},o($Vj1,[2,129]),{7:76,8:77,10:$V1,14:[1,267],15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,37:141,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},o($Vf1,[2,43]),{22:[1,268]},{7:76,8:77,10:$V1,15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,35:269,37:75,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},o($Vf1,[2,48]),o([14,53],[2,55],{62:14,7:76,8:77,15:78,16:79,17:80,18:81,19:82,20:83,37:141,10:$V1,30:$V2,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,77:$V8,78:$V9}),{7:76,8:77,10:$V1,15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,35:270,37:75,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},o($Vk1,[2,53],{62:14,7:76,8:77,15:78,16:79,17:80,18:81,19:82,20:83,37:141,10:$V1,30:$V2,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,77:$V8,78:$V9}),{7:76,8:77,10:$V1,15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,35:271,37:75,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},o($Vf1,[2,59]),o($Vf1,[2,21]),{10:$Vm,22:$Vo,43:272,85:$Vp,98:$Vq,100:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx},{7:76,8:77,10:$V1,14:[1,273],15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,37:141,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},o($Vk1,[2,52],{62:14,7:76,8:77,15:78,16:79,17:80,18:81,19:82,20:83,37:141,10:$V1,30:$V2,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,77:$V8,78:$V9}),{7:76,8:77,10:$V1,14:[1,274],15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,37:141,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{24:[1,275],72:$VE,73:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR,96:$VS,97:$VT,99:$VU},o($Vf1,[2,46]),o($Vf1,[2,58]),{12:[1,276]},{7:76,8:77,10:$V1,15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,35:277,37:75,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},{7:76,8:77,10:$V1,14:[1,278],15:78,16:79,17:80,18:81,19:82,20:83,30:$V2,37:141,38:$Vy,39:$Vz,40:$VA,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,77:$V8,78:$V9},o($Vf1,$Vh1,{44:279,45:$Vi1}),o($Vf1,[2,45])],
defaultActions: {21:[2,85],22:[2,86],23:[2,1],134:[2,88],148:[2,60],149:[2,61],174:[2,82],175:[2,83],207:[2,87],249:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const callFunction = require('./callFunction.js');
    const TObject = require('./TObject.js');
	const Operation = require('./Operation.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Comentario Linea
break;
case 1://Comentaio Multilinea
break;
case 2:return 39;
break;
case 3:return 38;
break;
case 4:return 104;
break;
case 5:return 9;
break;
case 6:return 78;
break;
case 7:return 77;
break;
case 8:return 78;
break;
case 9:return 30;
break;
case 10:return 42;
break;
case 11:return 45;
break;
case 12:return 47;
break;
case 13:return 48;
break;
case 14:return 49;
break;
case 15:return 53;
break;
case 16:return 56;
break;
case 17:return 57;
break;
case 18:return 60;
break;
case 19:return 61;
break;
case 20:return 79;
break;
case 21:return 80;
break;
case 22:return 81;
break;
case 23:return 82;
break;
case 24:return 102;
break;
case 25:return 103;
break;
case 26:return 105;
break;
case 27:return 40;
break;
case 28:return 68;
break;
case 29:return 69;
break;
case 30:return 70;
break;
case 31:return 71;
break;
case 32:return 12;
break;
case 33:return 14;
break;
case 34:return 22;
break;
case 35:return 24;
break;
case 36:return 28;
break;
case 37:return 25;
break;
case 38:return 33;
break;
case 39:return 66;
break;
case 40:return 72;
break;
case 41:return 73;
break;
case 42:return 84;
break;
case 43:return 85;
break;
case 44:return 88;
break;
case 45:return 86;
break;
case 46:return 87;
break;
case 47:return 89;
break;
case 48:return 92;
break;
case 49:return 93;
break;
case 50:return 90;
break;
case 51:return 91;
break;
case 52:return 94;
break;
case 53:return 11;
break;
case 54:return 95;
break;
case 55:return 96;
break;
case 56:return 97;
break;
case 57:return 98;
break;
case 58:return 99;
break;
case 59:return 106;
break;
case 60:return 108;
break;
case 61:
break;
case 62:
break;
case 63:
break;
case 64:
break;
case 65:return 100;
break;
case 66:return 101;
break;
case 67:return 10;
break;
case 68:return 5;
break;
case 69: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:return\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:\s+)/,/^(?:\t+)/,/^(?:\r+)/,/^(?:\n+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:([a-zA-Z$_])[a-zA-Z0-9_$]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}