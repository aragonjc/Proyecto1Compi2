/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,13],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[5,9,10,28,38,42,43,44,52,65,66],$Vb=[1,27],$Vc=[1,47],$Vd=[1,49],$Ve=[2,15],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,48],$Vo=[1,72],$Vp=[1,61],$Vq=[1,69],$Vr=[1,70],$Vs=[1,71],$Vt=[23,26],$Vu=[1,80],$Vv=[1,81],$Vw=[1,82],$Vx=[1,83],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[14,23,24,26,30,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,97],$VM=[1,107],$VN=[5,9,10,14,24,28,34,35,36,37,38,42,43,44,48,51,52,55,56,65,66],$VO=[1,114],$VP=[1,110],$VQ=[1,111],$VR=[1,112],$VS=[1,113],$VT=[5,9,10,14,28,34,35,36,37,38,42,43,44,48,51,52,65,66],$VU=[10,14,28,34,35,36,37,38,42,43,44,48,51,52,65,66],$VV=[55,56],$VW=[1,132],$VX=[26,97],$VY=[1,157],$VZ=[1,156],$V_=[14,24,26],$V$=[11,12,14,24,26],$V01=[14,23,24,26,30,71,72,77,78,79,80,81,82,83,84,86,97],$V11=[14,23,24,26,30,71,72,73,74,76,77,78,79,80,81,82,83,84,86,97],$V21=[14,23,24,26,30,77,78,79,80,81,82,83,84,86,97],$V31=[1,184],$V41=[1,197],$V51=[2,37],$V61=[1,202],$V71=[14,48,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Bloque":4,"EOF":5,"Instruccion":6,"llamadaFuncion":7,"variables":8,"Type":9,"id":10,"igual":11,"curlyBraceOpen":12,"parsObj":13,"curlyBraceClose":14,"funciones":15,"IF":16,"WHILE":17,"DOWHILE":18,"SWITCH":19,"FOR":20,"bracketOpen":21,"paramFunc":22,"bracketClose":23,"semicolon":24,"paramFuncList":25,"comma":26,"exp":27,"function":28,"funcDec":29,"dosPuntos":30,"types":31,"STMT":32,"InstruccionI":33,"llamadFuncion":34,"Break":35,"Continue":36,"return":37,"if":38,"IFLAST":39,"else":40,"IFCOND":41,"while":42,"do":43,"switch":44,"FIRSTCASE":45,"LASTCASE":46,"CASE":47,"case":48,"DEFCASE":49,"ENDCASE":50,"default":51,"for":52,"forDec":53,"forOP":54,"in":55,"of":56,"defType":57,"defLast":58,"asgnLast":59,"asignLast":60,"point":61,"objType":62,"opkv":63,"keyvalueT":64,"let":65,"const":66,"number":67,"boolean":68,"string":69,"void":70,"mas":71,"menos":72,"por":73,"division":74,"potencia":75,"modulo":76,"mayorque":77,"menorque":78,"mayorigualque":79,"menorigualque":80,"igualdad":81,"diferencia":82,"and":83,"or":84,"not":85,"question":86,"increment":87,"decrement":88,"NUMBER":89,"STRING":90,"true":91,"false":92,"null":93,"undefined":94,"sqBracketOpen":95,"arrParam":96,"sqBracketClose":97,"objetoParam":98,"listArrParam":99,"objetoParamList":100,"keyvalue":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"Type",10:"id",11:"igual",12:"curlyBraceOpen",14:"curlyBraceClose",21:"bracketOpen",23:"bracketClose",24:"semicolon",26:"comma",28:"function",30:"dosPuntos",34:"llamadFuncion",35:"Break",36:"Continue",37:"return",38:"if",40:"else",42:"while",43:"do",44:"switch",48:"case",51:"default",52:"for",55:"in",56:"of",59:"asgnLast",61:"point",65:"let",66:"const",67:"number",68:"boolean",69:"string",70:"void",71:"mas",72:"menos",73:"por",74:"division",75:"potencia",76:"modulo",77:"mayorque",78:"menorque",79:"mayorigualque",80:"menorigualque",81:"igualdad",82:"diferencia",83:"and",84:"or",85:"not",86:"question",87:"increment",88:"decrement",89:"NUMBER",90:"STRING",91:"true",92:"false",93:"null",94:"undefined",95:"sqBracketOpen",97:"sqBracketClose"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,6],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[22,1],[22,0],[25,3],[25,1],[15,3],[29,5],[29,3],[32,2],[32,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,2],[33,3],[16,8],[39,2],[39,0],[41,8],[41,3],[17,7],[18,9],[19,8],[45,1],[45,0],[47,5],[47,4],[46,2],[49,3],[50,1],[50,0],[20,11],[20,9],[54,1],[54,1],[53,1],[53,1],[8,4],[8,3],[60,4],[60,2],[13,1],[13,0],[62,3],[62,1],[63,1],[63,1],[64,3],[57,1],[57,1],[58,4],[58,2],[58,0],[31,1],[31,1],[31,1],[31,1],[31,1],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,5],[27,2],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,3],[27,1],[27,4],[27,3],[27,3],[96,1],[96,0],[99,3],[99,1],[98,1],[98,0],[100,3],[100,1],[101,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$=[$$[$0]]; 
break;
case 4:
 this.$ = $$[$0]; 
break;
case 13:
 this.$ = new callFunction(0,0,$$[$0-4],$$[$0-2]); 
break;
case 14:
this.$ = $$[$0];
break;
case 15:
this.$ = null;
break;
case 16:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 17:
this.$ = [$$[$0]];
break;
case 78:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"+"); 
break;
case 79:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"-"); 
break;
case 80:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"*"); 
break;
case 81:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"/"); 
break;
case 82:
 this.$ = new Operation(0,0,$$[$0],null,"unary"); 
break;
case 83:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"**"); 
break;
case 84:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"%"); 
break;
case 97:
 this.$ = new TObject(0,0,$$[$0],"NUMBER"); 
break;
case 98:
 this.$ = new TObject(0,0,$$[$0].substring(1,$$[$0].length-1),"STRING"); 
break;
case 99: case 100:
 this.$ = new TObject(0,0,$$[$0],"BOOL"); 
break;
case 101:
 this.$ = new TObject(0,0,$$[$0],"NULL"); 
break;
case 102:
 this.$ = new TObject(0,0,$$[$0],"UNDEFINED"); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,10:$V1,15:7,16:8,17:9,18:10,19:11,20:12,28:$V2,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{1:[3]},{5:[1,23],6:24,7:4,8:5,9:$V0,10:$V1,15:7,16:8,17:9,18:10,19:11,20:12,28:$V2,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),{10:[1,25]},o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),{21:[1,26],59:$Vb},{10:[1,28]},{10:[1,29]},{21:[1,30]},{21:[1,31]},{12:[1,32]},{21:[1,33]},{21:[1,34]},{10:[2,68]},{10:[2,69]},{1:[2,1]},o($Va,[2,2]),{11:[1,35]},{10:$Vc,12:$Vd,22:36,23:$Ve,25:37,27:38,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{24:[1,50]},{11:[1,53],24:[2,72],30:[1,52],58:51},{12:[1,56],29:54,30:[1,55]},{10:$Vc,12:$Vd,27:57,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:58,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{8:62,10:$Vo,15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,32:59,33:60,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{10:$Vc,12:$Vd,27:73,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{8:74,10:[1,76],53:75,57:14,65:$V8,66:$V9},{12:[1,77]},{23:[1,78]},{23:[2,14],26:[1,79]},o($Vt,[2,17],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK}),{10:$Vc,12:$Vd,27:97,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:98,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($VL,[2,97]),o($VL,[2,98]),o($VL,[2,99]),o($VL,[2,100]),o($VL,[2,101]),o($VL,[2,102]),o($VL,[2,104],{21:[1,100],61:[1,99]}),{10:$Vc,12:$Vd,27:103,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn,96:101,97:[2,109],99:102},{10:$VM,14:[2,113],98:104,100:105,101:106},o($VN,[2,58]),{24:[1,108]},{10:$VO,31:109,67:$VP,68:$VQ,69:$VR,70:$VS},{10:$Vc,12:$Vd,27:115,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($VT,[2,18]),{10:$VO,31:116,67:$VP,68:$VQ,69:$VR,70:$VS},{8:62,10:$Vo,15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,32:117,33:60,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{23:[1,118],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},{23:[1,119],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},{8:62,10:$Vo,14:[1,120],15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,33:121,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},o($VU,[2,22]),o($VU,[2,23]),o($VU,[2,24]),o($VU,[2,25]),o($VU,[2,26]),o($VU,[2,27]),o($VU,[2,28]),o($VU,[2,29]),o($VU,[2,30]),o($VU,[2,31]),o($VU,[2,32]),{10:$Vc,12:$Vd,24:[1,122],27:123,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{59:$Vb},{23:[1,124],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},o($VV,[2,55],{24:[1,125]}),{54:126,55:[1,127],56:[1,128]},o($VV,[2,56],{59:$Vb}),{10:$VW,13:129,14:[2,62],62:130,64:131},{24:[1,133]},{10:$Vc,12:$Vd,27:134,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:135,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:136,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:137,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:138,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:139,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:140,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:141,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:142,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:143,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:144,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:145,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:146,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:147,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:148,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:149,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($VL,[2,95]),o($VL,[2,96]),o($VL,[2,82]),o($VL,[2,93]),{10:[1,150]},{10:$Vc,12:$Vd,22:151,23:$Ve,25:37,27:38,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{97:[1,152]},{26:[1,153],97:[2,108]},o($VX,[2,111],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK}),{14:[1,154]},{14:[2,112],24:$VY,26:$VZ,63:155},o($V_,[2,115]),{30:[1,158]},o($VN,[2,57]),{11:[1,159]},o($V$,[2,73]),o($V$,[2,74]),o($V$,[2,75]),o($V$,[2,76]),o($V$,[2,77]),{24:[2,71],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},{12:[1,160]},{8:62,10:$Vo,14:[1,161],15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,33:121,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{12:[1,162]},{12:[1,163]},{42:[1,164]},o($VU,[2,21]),o($VU,[2,33]),{24:[1,165],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},{12:[1,166]},{10:$Vc,12:$Vd,27:167,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:[1,168]},{10:[2,53]},{10:[2,54]},{14:[1,169]},{14:[2,61],24:$VY,26:$VZ,63:170},o($V_,[2,64]),{30:[1,171]},o($Va,[2,13]),o($Vt,[2,16],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK}),o($V01,[2,78],{73:$Vw,74:$Vx,75:$Vy,76:$Vz,87:$VJ,88:$VK}),o($V01,[2,79],{73:$Vw,74:$Vx,75:$Vy,76:$Vz,87:$VJ,88:$VK}),o($V11,[2,80],{75:$Vy,87:$VJ,88:$VK}),o($V11,[2,81],{75:$Vy,87:$VJ,88:$VK}),o($VL,[2,83]),o($V11,[2,84],{75:$Vy,87:$VJ,88:$VK}),o($V21,[2,85],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,87:$VJ,88:$VK}),o($V21,[2,86],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,87:$VJ,88:$VK}),o($V21,[2,87],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,87:$VJ,88:$VK}),o($V21,[2,88],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,87:$VJ,88:$VK}),o($V21,[2,89],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,87:$VJ,88:$VK}),o($V21,[2,90],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,87:$VJ,88:$VK}),o([14,23,24,26,30,83,84,86,97],[2,91],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,87:$VJ,88:$VK}),o([14,23,24,26,30,84,86,97],[2,92],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,87:$VJ,88:$VK}),{30:[1,172],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},o($VL,[2,103]),{23:[1,173]},o($VL,[2,106]),{10:$Vc,12:$Vd,27:174,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($VL,[2,107]),{10:$VM,101:175},{10:[2,65]},{10:[2,66]},{10:$Vc,12:$Vd,27:176,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:177,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{8:62,10:$Vo,15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,32:178,33:60,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},o($VT,[2,20]),{8:62,10:$Vo,15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,32:179,33:60,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{8:62,10:$Vo,15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,32:180,33:60,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{21:[1,181]},o($VU,[2,34]),{45:182,47:183,48:$V31,51:[2,44]},{24:[1,185],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},{23:[1,186]},o($Va,[2,6]),{10:$VW,64:187},{10:$VO,31:188,67:$VP,68:$VQ,69:$VR,70:$VS},{10:$Vc,12:$Vd,27:189,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},o($VL,[2,105]),o($VX,[2,110],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK}),o($V_,[2,114]),o($V_,[2,116],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK}),{24:[2,70],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},{8:62,10:$Vo,14:[1,190],15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,33:121,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{8:62,10:$Vo,14:[1,191],15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,33:121,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{8:62,10:$Vo,14:[1,192],15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,33:121,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{10:$Vc,12:$Vd,27:193,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{46:194,49:195,51:[1,196]},{48:$V41,51:[2,43]},{10:$Vc,12:$Vd,27:198,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{10:$Vc,12:$Vd,27:199,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{12:[1,200]},o($V_,[2,63]),o($V_,[2,67]),o([14,23,24,26,30,97],[2,94],{71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK}),o($VT,[2,19]),o($VT,$V51,{39:201,40:$V61}),o($VT,[2,40]),{23:[1,203],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},{14:[1,204]},{14:[2,50],47:206,48:$V31,50:205},{30:[1,207]},{10:$Vc,12:$Vd,27:208,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{30:[1,209],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},{23:[1,210],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},{8:62,10:$Vo,15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,32:211,33:60,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},o($VT,[2,35]),{12:[1,214],38:[1,213],41:212},{24:[1,215]},o($VT,[2,42]),{14:[2,47]},{14:[2,49],48:$V41},{8:62,10:$Vo,15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,32:216,33:60,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{30:[1,217],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},{8:62,10:$Vo,15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,32:218,33:60,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{12:[1,219]},{8:62,10:$Vo,14:[1,220],15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,33:121,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},o($VT,[2,36]),{21:[1,221]},{8:62,10:$Vo,15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,32:222,33:60,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},o($VT,[2,41]),o([14,48],[2,48],{57:14,8:62,15:63,16:64,17:65,18:66,19:67,20:68,33:121,10:$Vo,28:$V2,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,65:$V8,66:$V9}),{8:62,10:$Vo,15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,32:223,33:60,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},o($V71,[2,46],{57:14,8:62,15:63,16:64,17:65,18:66,19:67,20:68,33:121,10:$Vo,28:$V2,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,65:$V8,66:$V9}),{8:62,10:$Vo,15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,32:224,33:60,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},o($VT,[2,52]),{10:$Vc,12:$Vd,27:225,72:$Vf,85:$Vg,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm,95:$Vn},{8:62,10:$Vo,14:[1,226],15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,33:121,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},o($V71,[2,45],{57:14,8:62,15:63,16:64,17:65,18:66,19:67,20:68,33:121,10:$Vo,28:$V2,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,65:$V8,66:$V9}),{8:62,10:$Vo,14:[1,227],15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,33:121,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{23:[1,228],71:$Vu,72:$Vv,73:$Vw,74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VI,87:$VJ,88:$VK},o($VT,[2,39]),o($VT,[2,51]),{12:[1,229]},{8:62,10:$Vo,15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,32:230,33:60,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},{8:62,10:$Vo,14:[1,231],15:63,16:64,17:65,18:66,19:67,20:68,28:$V2,33:121,34:$Vp,35:$Vq,36:$Vr,37:$Vs,38:$V3,42:$V4,43:$V5,44:$V6,52:$V7,57:14,65:$V8,66:$V9},o($VT,$V51,{39:232,40:$V61}),o($VT,[2,38])],
defaultActions: {21:[2,68],22:[2,69],23:[2,1],127:[2,53],128:[2,54],156:[2,65],157:[2,66],205:[2,47]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const callFunction = require('./callFunction.js');
    const TObject = require('./TObject.js');
	const Operation = require('./Operation.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 36;
break;
case 1:return 35;
break;
case 2:return 93;
break;
case 3:return 9;
break;
case 4:return 66;
break;
case 5:return 65;
break;
case 6:return 66;
break;
case 7:return 28;
break;
case 8:return 38;
break;
case 9:return 40;
break;
case 10:return 42;
break;
case 11:return 43;
break;
case 12:return 44;
break;
case 13:return 48;
break;
case 14:return 51;
break;
case 15:return 52;
break;
case 16:return 55;
break;
case 17:return 56;
break;
case 18:return 67;
break;
case 19:return 68;
break;
case 20:return 69;
break;
case 21:return 70;
break;
case 22:return 91;
break;
case 23:return 92;
break;
case 24:return 94;
break;
case 25:return 11;
break;
case 26:return 12;
break;
case 27:return 14;
break;
case 28:return 21;
break;
case 29:return 23;
break;
case 30:return 26;
break;
case 31:return 24;
break;
case 32:return 30;
break;
case 33:return 61;
break;
case 34:return 71;
break;
case 35:return 72;
break;
case 36:return 75;
break;
case 37:return 73;
break;
case 38:return 74;
break;
case 39:return 76;
break;
case 40:return 77;
break;
case 41:return 78;
break;
case 42:return 79;
break;
case 43:return 80;
break;
case 44:return 81;
break;
case 45:return 82;
break;
case 46:return 83;
break;
case 47:return 84;
break;
case 48:return 85;
break;
case 49:return 86;
break;
case 50:return 87;
break;
case 51:return 88;
break;
case 52:return 95;
break;
case 53:return 97;
break;
case 54:
break;
case 55:
break;
case 56:return 89;
break;
case 57:return 90;
break;
case 58:return 10;
break;
case 59:return 5;
break;
case 60: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:continue\b)/,/^(?:break\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:=)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\[)/,/^(?:\])/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:([a-zA-Z$._])[a-zA-Z0-9_$.]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}