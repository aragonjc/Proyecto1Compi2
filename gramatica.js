/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[5,9,13,30,43,47,48,49,57,70,71],$Vb=[1,28],$Vc=[1,51],$Vd=[1,53],$Ve=[1,44],$Vf=[2,17],$Vg=[1,42],$Vh=[1,43],$Vi=[1,45],$Vj=[1,46],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,52],$Vp=[1,66],$Vq=[1,64],$Vr=[1,67],$Vs=[1,74],$Vt=[1,75],$Vu=[1,76],$Vv=[26,28],$Vw=[1,98],$Vx=[1,99],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[1,96],$VM=[1,97],$VN=[10,11,12,17,26,28,33,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,100],$VO=[1,111],$VP=[5,9,11,13,17,30,38,39,40,41,42,43,47,48,49,53,56,57,60,61,70,71],$VQ=[1,119],$VR=[1,115],$VS=[1,116],$VT=[1,117],$VU=[1,118],$VV=[9,17,30,38,39,40,41,42,43,47,48,49,53,56,57,70,71],$VW=[60,61],$VX=[28,100],$VY=[1,162],$VZ=[1,161],$V_=[11,17,28],$V$=[1,167],$V01=[11,14,15,17,26,28],$V11=[11,17,26,28,33,76,77,82,83,84,85,86,87,88,89,91,100],$V21=[11,17,26,28,33,76,77,78,79,81,82,83,84,85,86,87,88,89,91,100],$V31=[11,17,26,28,33,82,83,84,85,86,87,88,89,91,100],$V41=[1,198],$V51=[5,9,13,17,30,38,39,40,41,42,43,47,48,49,53,56,57,70,71],$V61=[1,213],$V71=[2,45],$V81=[1,221],$V91=[17,53,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Bloque":4,"EOF":5,"Instruccion":6,"llamadaFuncion":7,"variables":8,"id":9,"increment":10,"semicolon":11,"decrement":12,"Type":13,"igual":14,"curlyBraceOpen":15,"parsObj":16,"curlyBraceClose":17,"funciones":18,"IF":19,"WHILE":20,"DOWHILE":21,"SWITCH":22,"FOR":23,"bracketOpen":24,"paramFunc":25,"bracketClose":26,"paramFuncList":27,"comma":28,"exp":29,"function":30,"funcParam":31,"funcDec":32,"dosPuntos":33,"types":34,"STMT":35,"funcParamList":36,"InstruccionI":37,"llamadFuncion":38,"id--":39,"Break":40,"Continue":41,"return":42,"if":43,"IFLAST":44,"else":45,"IFCOND":46,"while":47,"do":48,"switch":49,"FIRSTCASE":50,"LASTCASE":51,"CASE":52,"case":53,"DEFCASE":54,"ENDCASE":55,"default":56,"for":57,"forDec":58,"forOP":59,"in":60,"of":61,"defType":62,"defLast":63,"asgnLast":64,"asignLast":65,"point":66,"objType":67,"opkv":68,"keyvalueT":69,"let":70,"const":71,"number":72,"boolean":73,"string":74,"void":75,"mas":76,"menos":77,"por":78,"division":79,"potencia":80,"modulo":81,"mayorque":82,"menorque":83,"mayorigualque":84,"menorigualque":85,"igualdad":86,"diferencia":87,"and":88,"or":89,"not":90,"question":91,"NUMBER":92,"STRING":93,"true":94,"false":95,"null":96,"undefined":97,"sqBracketOpen":98,"arrParam":99,"sqBracketClose":100,"objetoParam":101,"listArrParam":102,"objetoParamList":103,"keyvalue":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"id",10:"increment",11:"semicolon",12:"decrement",13:"Type",14:"igual",15:"curlyBraceOpen",17:"curlyBraceClose",24:"bracketOpen",26:"bracketClose",28:"comma",30:"function",33:"dosPuntos",38:"llamadFuncion",39:"id--",40:"Break",41:"Continue",42:"return",43:"if",45:"else",47:"while",48:"do",49:"switch",53:"case",56:"default",57:"for",60:"in",61:"of",64:"asgnLast",66:"point",70:"let",71:"const",72:"number",73:"boolean",74:"string",75:"void",76:"mas",77:"menos",78:"por",79:"division",80:"potencia",81:"modulo",82:"mayorque",83:"menorque",84:"mayorigualque",85:"menorigualque",86:"igualdad",87:"diferencia",88:"and",89:"or",90:"not",91:"question",92:"NUMBER",93:"STRING",94:"true",95:"false",96:"null",97:"undefined",98:"sqBracketOpen",100:"sqBracketClose"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,3],[6,3],[6,6],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[25,1],[25,0],[27,3],[27,1],[18,6],[32,5],[32,3],[31,1],[31,0],[36,5],[36,3],[35,2],[35,1],[37,1],[37,1],[37,2],[37,2],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,2],[37,3],[19,8],[44,2],[44,0],[46,8],[46,3],[20,7],[21,9],[22,8],[50,1],[50,0],[52,5],[52,4],[51,2],[54,3],[55,1],[55,0],[23,11],[23,9],[59,1],[59,1],[58,1],[58,1],[8,4],[8,3],[65,4],[65,2],[16,1],[16,0],[67,3],[67,1],[68,1],[68,1],[69,3],[62,1],[62,1],[63,4],[63,2],[63,0],[34,1],[34,1],[34,1],[34,1],[34,1],[29,3],[29,3],[29,3],[29,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,3],[29,5],[29,2],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[29,1],[29,4],[29,3],[29,3],[99,1],[99,0],[102,3],[102,1],[101,1],[101,0],[103,3],[103,1],[104,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
this.$=$$[$0-1] + $$[$0];
break;
case 3:
 this.$=$$[$0]; 
break;
case 4: case 5: case 9: case 10: case 11: case 12: case 13: case 14:
 this.$ = $$[$0] + "\n"; 
break;
case 6: case 7:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0] + "\n"; 
break;
case 8:
 this.$ = $$[$0-5] + " " + $$[$0-4] +" "+ $$[$0-3] + " "+ $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0] + "\n\n";
break;
case 15:
 this.$ = new callFunction(0,0,$$[$0-4],$$[$0-2]); 
break;
case 16: case 69: case 72: case 73: case 74:
this.$ = $$[$0];
break;
case 17:
this.$ = null;
break;
case 18:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 19:
this.$ = [$$[$0]];
break;
case 65:
 this.$ = new Variable(0,0,$$[$0-3],$$[$0-2],); 
break;
case 70: case 118:
this.$ = "";
break;
case 71:
this.$ = $$[$0-2] + $$[$0-1] + "\n" + $$[$0];
break;
case 75:
 this.$ = "\t" + $$[$0-2] + $$[$0-1] + " "+ $$[$0]; 
break;
case 76: case 77:
 this.$ = String($$[$0]); 
break;
case 81: case 82: case 83: case 84: case 85:
 this.$ = $$[$0];
break;
case 86: case 87: case 88: case 89: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 102:
 this.$ = String($$[$0-2] + $$[$0-1] + $$[$0]); 
break;
case 90: case 101: case 104: case 105:
 this.$ = String($$[$0-1] + $$[$0]); 
break;
case 103:
 this.$ = String($$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]); 
break;
case 106: case 107: case 108: case 109: case 110: case 111: case 113:
 this.$ = String($$[$0]);
break;
case 112:
this.$ = String($$[$0-2] + $$[$0-1] + $$[$0]);
break;
case 125:
 this.$ = String($$[$0-2]+$$[$0-1]+$$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,13:$V1,18:8,19:9,20:10,21:11,22:12,23:13,30:$V2,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{1:[3]},{5:[1,23],6:24,7:4,8:5,9:$V0,13:$V1,18:8,19:9,20:10,21:11,22:12,23:13,30:$V2,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),{10:[1,25],12:[1,26],24:[1,27],64:$Vb},{9:[1,29]},o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),o($Va,[2,13]),o($Va,[2,14]),{9:[1,30]},{9:[1,31]},{24:[1,32]},{24:[1,33]},{15:[1,34]},{24:[1,35]},{24:[1,36]},{9:[2,76]},{9:[2,77]},{1:[2,1]},o($Va,[2,2]),{11:[1,37]},{11:[1,38]},{9:$Vc,15:$Vd,24:$Ve,25:39,26:$Vf,27:40,29:41,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{11:[1,54]},{14:[1,55]},{11:[2,80],14:[1,58],33:[1,57],63:56},{24:[1,59]},{9:$Vc,15:$Vd,24:$Ve,29:60,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:61,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{8:65,9:$Vp,18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,35:62,37:63,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{9:$Vc,15:$Vd,24:$Ve,29:77,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{8:78,9:[1,80],58:79,62:14,70:$V8,71:$V9},o($Va,[2,6]),o($Va,[2,7]),{26:[1,81]},{26:[2,16],28:[1,82]},o($Vv,[2,19],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM}),{9:$Vc,15:$Vd,24:$Ve,29:100,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:101,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:102,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},o($VN,[2,106]),o($VN,[2,107]),o($VN,[2,108]),o($VN,[2,109]),o($VN,[2,110]),o($VN,[2,111]),o($VN,[2,113],{24:[1,104],66:[1,103]}),{9:$Vc,15:$Vd,24:$Ve,29:107,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo,99:105,100:[2,118],102:106},{9:$VO,17:[2,122],101:108,103:109,104:110},o($VP,[2,66]),{15:[1,112]},{11:[1,113]},{9:$VQ,34:114,72:$VR,73:$VS,74:$VT,75:$VU},{9:$Vc,15:$Vd,24:$Ve,29:120,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:[1,123],26:[2,24],31:121,36:122},{10:$Vw,12:$Vx,26:[1,124],76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},{10:$Vw,12:$Vx,26:[1,125],76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},{8:65,9:$Vp,17:[1,126],18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,37:127,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},o($VV,[2,28]),o($VV,[2,29]),o($VV,[2,30]),{11:[1,128],64:$Vb},{11:[1,129]},o($VV,[2,33]),o($VV,[2,34]),o($VV,[2,35]),o($VV,[2,36]),o($VV,[2,37]),o($VV,[2,38]),o($VV,[2,39]),o($VV,[2,40]),{9:$Vc,11:[1,130],15:$Vd,24:$Ve,29:131,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{10:$Vw,12:$Vx,26:[1,132],76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},o($VW,[2,63],{11:[1,133]}),{59:134,60:[1,135],61:[1,136]},o($VW,[2,64],{64:$Vb}),{11:[1,137]},{9:$Vc,15:$Vd,24:$Ve,29:138,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:139,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:140,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:141,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:142,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:143,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:144,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:145,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:146,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:147,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:148,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:149,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:150,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:151,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:152,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:153,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},o($VN,[2,104]),o($VN,[2,105]),o($VN,[2,90]),o($VN,[2,101]),{10:$Vw,12:$Vx,26:[1,154],76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},{9:[1,155]},{9:$Vc,15:$Vd,24:$Ve,25:156,26:$Vf,27:40,29:41,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{100:[1,157]},{28:[1,158],100:[2,117]},o($VX,[2,120],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM}),{17:[1,159]},{11:$VY,17:[2,121],28:$VZ,68:160},o($V_,[2,124]),{33:[1,163]},{9:$V$,16:164,17:[2,70],67:165,69:166},o($VP,[2,65]),{14:[1,168]},o($V01,[2,81]),o($V01,[2,82]),o($V01,[2,83]),o($V01,[2,84]),o($V01,[2,85]),{10:$Vw,11:[2,79],12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},{26:[1,169]},{26:[2,23],28:[1,170]},{33:[1,171]},{15:[1,172]},{15:[1,173]},{47:[1,174]},o($VV,[2,27]),o($VV,[2,31]),o($VV,[2,32]),o($VV,[2,41]),{10:$Vw,11:[1,175],12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},{15:[1,176]},{9:$Vc,15:$Vd,24:$Ve,29:177,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:[1,178]},{9:[2,61]},{9:[2,62]},o($Va,[2,15]),o($Vv,[2,18],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM}),o($V11,[2,86],{10:$Vw,12:$Vx,78:$VA,79:$VB,80:$VC,81:$VD}),o($V11,[2,87],{10:$Vw,12:$Vx,78:$VA,79:$VB,80:$VC,81:$VD}),o($V21,[2,88],{10:$Vw,12:$Vx,80:$VC}),o($V21,[2,89],{10:$Vw,12:$Vx,80:$VC}),o($VN,[2,91]),o($V21,[2,92],{10:$Vw,12:$Vx,80:$VC}),o($V31,[2,93],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),o($V31,[2,94],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),o($V31,[2,95],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),o($V31,[2,96],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),o($V31,[2,97],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),o($V31,[2,98],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD}),o([11,17,26,28,33,88,89,91,100],[2,99],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),o([11,17,26,28,33,89,91,100],[2,100],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK}),{10:$Vw,12:$Vx,33:[1,179],76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},o($VN,[2,102]),o($VN,[2,112]),{26:[1,180]},o($VN,[2,115]),{9:$Vc,15:$Vd,24:$Ve,29:181,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},o($VN,[2,116]),{9:$VO,104:182},{9:[2,73]},{9:[2,74]},{9:$Vc,15:$Vd,24:$Ve,29:183,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{17:[1,184]},{11:$VY,17:[2,69],28:$VZ,68:185},o($V_,[2,72]),{33:[1,186]},{9:$Vc,15:$Vd,24:$Ve,29:187,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{15:[1,190],32:188,33:[1,189]},{9:[1,191]},{9:$VQ,34:192,72:$VR,73:$VS,74:$VT,75:$VU},{8:65,9:$Vp,18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,35:193,37:63,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{8:65,9:$Vp,18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,35:194,37:63,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{24:[1,195]},o($VV,[2,42]),{50:196,52:197,53:$V41,56:[2,52]},{10:$Vw,11:[1,199],12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},{26:[1,200]},{9:$Vc,15:$Vd,24:$Ve,29:201,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},o($VN,[2,114]),o($VX,[2,119],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM}),o($V_,[2,123]),o($V_,[2,125],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM}),o($Va,[2,8]),{9:$V$,69:202},{9:$VQ,34:203,72:$VR,73:$VS,74:$VT,75:$VU},{10:$Vw,11:[2,78],12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},o($V51,[2,20]),{9:$VQ,34:204,72:$VR,73:$VS,74:$VT,75:$VU},{8:65,9:$Vp,18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,35:205,37:63,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{33:[1,206]},o($Vv,[2,26]),{8:65,9:$Vp,17:[1,207],18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,37:127,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{8:65,9:$Vp,17:[1,208],18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,37:127,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{9:$Vc,15:$Vd,24:$Ve,29:209,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{51:210,54:211,56:[1,212]},{53:$V61,56:[2,51]},{9:$Vc,15:$Vd,24:$Ve,29:214,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{9:$Vc,15:$Vd,24:$Ve,29:215,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{15:[1,216]},o([11,17,26,28,33,100],[2,103],{10:$Vw,12:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM}),o($V_,[2,71]),o($V_,[2,75]),{15:[1,217]},{8:65,9:$Vp,17:[1,218],18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,37:127,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{9:$VQ,34:219,72:$VR,73:$VS,74:$VT,75:$VU},o($V51,$V71,{44:220,45:$V81}),o($V51,[2,48]),{10:$Vw,12:$Vx,26:[1,222],76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},{17:[1,223]},{17:[2,58],52:225,53:$V41,55:224},{33:[1,226]},{9:$Vc,15:$Vd,24:$Ve,29:227,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{10:$Vw,12:$Vx,33:[1,228],76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},{10:$Vw,12:$Vx,26:[1,229],76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},{8:65,9:$Vp,18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,35:230,37:63,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{8:65,9:$Vp,18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,35:231,37:63,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},o($V51,[2,22]),o($Vv,[2,25]),o($V51,[2,43]),{15:[1,234],43:[1,233],46:232},{11:[1,235]},o($V51,[2,50]),{17:[2,55]},{17:[2,57],53:$V61},{8:65,9:$Vp,18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,35:236,37:63,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{10:$Vw,12:$Vx,33:[1,237],76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},{8:65,9:$Vp,18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,35:238,37:63,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{15:[1,239]},{8:65,9:$Vp,17:[1,240],18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,37:127,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{8:65,9:$Vp,17:[1,241],18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,37:127,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},o($V51,[2,44]),{24:[1,242]},{8:65,9:$Vp,18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,35:243,37:63,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},o($V51,[2,49]),o([17,53],[2,56],{62:14,8:65,18:68,19:69,20:70,21:71,22:72,23:73,37:127,9:$Vp,30:$V2,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,70:$V8,71:$V9}),{8:65,9:$Vp,18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,35:244,37:63,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},o($V91,[2,54],{62:14,8:65,18:68,19:69,20:70,21:71,22:72,23:73,37:127,9:$Vp,30:$V2,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,70:$V8,71:$V9}),{8:65,9:$Vp,18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,35:245,37:63,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},o($V51,[2,60]),o($V51,[2,21]),{9:$Vc,15:$Vd,24:$Ve,29:246,77:$Vg,90:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm,97:$Vn,98:$Vo},{8:65,9:$Vp,17:[1,247],18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,37:127,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},o($V91,[2,53],{62:14,8:65,18:68,19:69,20:70,21:71,22:72,23:73,37:127,9:$Vp,30:$V2,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,70:$V8,71:$V9}),{8:65,9:$Vp,17:[1,248],18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,37:127,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{10:$Vw,12:$Vx,26:[1,249],76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,91:$VM},o($V51,[2,47]),o($V51,[2,59]),{15:[1,250]},{8:65,9:$Vp,18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,35:251,37:63,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},{8:65,9:$Vp,17:[1,252],18:68,19:69,20:70,21:71,22:72,23:73,30:$V2,37:127,38:$Vq,39:$Vr,40:$Vs,41:$Vt,42:$Vu,43:$V3,47:$V4,48:$V5,49:$V6,57:$V7,62:14,70:$V8,71:$V9},o($V51,$V71,{44:253,45:$V81}),o($V51,[2,46])],
defaultActions: {21:[2,76],22:[2,77],23:[2,1],135:[2,61],136:[2,62],161:[2,73],162:[2,74],224:[2,55]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const callFunction = require('./callFunction.js');
    const TObject = require('./TObject.js');
	const Operation = require('./Operation.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 41;
break;
case 1:return 40;
break;
case 2:return 96;
break;
case 3:return 13;
break;
case 4:return 71;
break;
case 5:return 70;
break;
case 6:return 71;
break;
case 7:return 30;
break;
case 8:return 43;
break;
case 9:return 45;
break;
case 10:return 47;
break;
case 11:return 48;
break;
case 12:return 49;
break;
case 13:return 53;
break;
case 14:return 56;
break;
case 15:return 57;
break;
case 16:return 60;
break;
case 17:return 61;
break;
case 18:return 72;
break;
case 19:return 73;
break;
case 20:return 74;
break;
case 21:return 75;
break;
case 22:return 94;
break;
case 23:return 95;
break;
case 24:return 97;
break;
case 25:return 15;
break;
case 26:return 17;
break;
case 27:return 24;
break;
case 28:return 26;
break;
case 29:return 28;
break;
case 30:return 11;
break;
case 31:return 33;
break;
case 32:return 66;
break;
case 33:return 10;
break;
case 34:return 12;
break;
case 35:return 76;
break;
case 36:return 77;
break;
case 37:return 80;
break;
case 38:return 78;
break;
case 39:return 79;
break;
case 40:return 81;
break;
case 41:return 84;
break;
case 42:return 85;
break;
case 43:return 82;
break;
case 44:return 83;
break;
case 45:return 86;
break;
case 46:return 14;
break;
case 47:return 87;
break;
case 48:return 88;
break;
case 49:return 89;
break;
case 50:return 90;
break;
case 51:return 91;
break;
case 52:return 98;
break;
case 53:return 100;
break;
case 54:
break;
case 55:
break;
case 56:return 92;
break;
case 57:return 93;
break;
case 58:return 9;
break;
case 59:return 5;
break;
case 60: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:continue\b)/,/^(?:break\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:([a-zA-Z$._])[a-zA-Z0-9_$.]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}