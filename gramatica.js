/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[1,8],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[5,9,11,12,29,39,43,44,45,53,66,67],$Vc=[1,28],$Vd=[1,50],$Ve=[1,52],$Vf=[1,43],$Vg=[2,17],$Vh=[1,41],$Vi=[1,42],$Vj=[1,44],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,51],$Vq=[1,67],$Vr=[1,68],$Vs=[1,65],$Vt=[1,75],$Vu=[1,76],$Vv=[1,77],$Vw=[25,27],$Vx=[1,84],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[1,100],$VO=[10,16,25,27,31,72,73,74,75,76,77,78,79,80,81,82,83,84,85,87,88,89,98],$VP=[1,112],$VQ=[5,9,10,11,12,16,29,35,36,37,38,39,43,44,45,49,52,53,56,57,66,67],$VR=[1,120],$VS=[1,116],$VT=[1,117],$VU=[1,118],$VV=[1,119],$VW=[5,9,11,12,16,29,35,36,37,38,39,43,44,45,49,52,53,66,67],$VX=[9,11,16,29,35,36,37,38,39,43,44,45,49,52,53,66,67],$VY=[56,57],$VZ=[27,98],$V_=[1,162],$V$=[1,161],$V01=[10,16,27],$V11=[1,167],$V21=[10,13,14,16,27],$V31=[10,16,25,27,31,72,73,78,79,80,81,82,83,84,85,87,98],$V41=[10,16,25,27,31,72,73,74,75,77,78,79,80,81,82,83,84,85,87,98],$V51=[10,16,25,27,31,78,79,80,81,82,83,84,85,87,98],$V61=[1,193],$V71=[1,206],$V81=[2,41],$V91=[1,211],$Va1=[16,49,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Bloque":4,"EOF":5,"Instruccion":6,"llamadaFuncion":7,"variables":8,"id":9,"semicolon":10,"id--":11,"Type":12,"igual":13,"curlyBraceOpen":14,"parsObj":15,"curlyBraceClose":16,"funciones":17,"IF":18,"WHILE":19,"DOWHILE":20,"SWITCH":21,"FOR":22,"bracketOpen":23,"paramFunc":24,"bracketClose":25,"paramFuncList":26,"comma":27,"exp":28,"function":29,"funcDec":30,"dosPuntos":31,"types":32,"STMT":33,"InstruccionI":34,"llamadFuncion":35,"Break":36,"Continue":37,"return":38,"if":39,"IFLAST":40,"else":41,"IFCOND":42,"while":43,"do":44,"switch":45,"FIRSTCASE":46,"LASTCASE":47,"CASE":48,"case":49,"DEFCASE":50,"ENDCASE":51,"default":52,"for":53,"forDec":54,"forOP":55,"in":56,"of":57,"defType":58,"defLast":59,"asgnLast":60,"asignLast":61,"point":62,"objType":63,"opkv":64,"keyvalueT":65,"let":66,"const":67,"number":68,"boolean":69,"string":70,"void":71,"mas":72,"menos":73,"por":74,"division":75,"potencia":76,"modulo":77,"mayorque":78,"menorque":79,"mayorigualque":80,"menorigualque":81,"igualdad":82,"diferencia":83,"and":84,"or":85,"not":86,"question":87,"increment":88,"decrement":89,"NUMBER":90,"STRING":91,"true":92,"false":93,"null":94,"undefined":95,"sqBracketOpen":96,"arrParam":97,"sqBracketClose":98,"objetoParam":99,"listArrParam":100,"objetoParamList":101,"keyvalue":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"id",10:"semicolon",11:"id--",12:"Type",13:"igual",14:"curlyBraceOpen",16:"curlyBraceClose",23:"bracketOpen",25:"bracketClose",27:"comma",29:"function",31:"dosPuntos",35:"llamadFuncion",36:"Break",37:"Continue",38:"return",39:"if",41:"else",43:"while",44:"do",45:"switch",49:"case",52:"default",53:"for",56:"in",57:"of",60:"asgnLast",62:"point",66:"let",67:"const",68:"number",69:"boolean",70:"string",71:"void",72:"mas",73:"menos",74:"por",75:"division",76:"potencia",77:"modulo",78:"mayorque",79:"menorque",80:"mayorigualque",81:"menorigualque",82:"igualdad",83:"diferencia",84:"and",85:"or",86:"not",87:"question",88:"increment",89:"decrement",90:"NUMBER",91:"STRING",92:"true",93:"false",94:"null",95:"undefined",96:"sqBracketOpen",98:"sqBracketClose"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,2],[6,6],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[24,1],[24,0],[26,3],[26,1],[17,3],[30,5],[30,3],[33,2],[33,1],[34,1],[34,1],[34,2],[34,2],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,2],[34,3],[18,8],[40,2],[40,0],[42,8],[42,3],[19,7],[20,9],[21,8],[46,1],[46,0],[48,5],[48,4],[47,2],[50,3],[51,1],[51,0],[22,11],[22,9],[55,1],[55,1],[54,1],[54,1],[8,4],[8,3],[61,4],[61,2],[15,1],[15,0],[63,3],[63,1],[64,1],[64,1],[65,3],[58,1],[58,1],[59,4],[59,2],[59,0],[32,1],[32,1],[32,1],[32,1],[32,1],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,5],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,3],[28,1],[28,4],[28,3],[28,3],[97,1],[97,0],[100,3],[100,1],[99,1],[99,0],[101,3],[101,1],[102,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$=[$$[$0]]; 
break;
case 4:
 this.$ = $$[$0]; 
break;
case 15:
 this.$ = new callFunction(0,0,$$[$0-4],$$[$0-2]); 
break;
case 16:
this.$ = $$[$0];
break;
case 17:
this.$ = null;
break;
case 18:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 19:
this.$ = [$$[$0]];
break;
case 82:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"+"); 
break;
case 83:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"-"); 
break;
case 84:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"*"); 
break;
case 85:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"/"); 
break;
case 86:
 this.$ = new Operation(0,0,$$[$0],null,"unary"); 
break;
case 87:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"**"); 
break;
case 88:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"%"); 
break;
case 89:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],">"); 
break;
case 90:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"<"); 
break;
case 91:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],">="); 
break;
case 92:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"<="); 
break;
case 93:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"=="); 
break;
case 94:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"!="); 
break;
case 95:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"&&"); 
break;
case 96:
 this.$ = new Operation(0,0,$$[$0-2],$$[$0],"||"); 
break;
case 97:
 this.$ = new Operation(0,0,$$[$0],null,"!"); 
break;
case 98:
 this.$ = $$[$0-1]; 
break;
case 100:
 this.$ = new Operation(0,0,$$[$0-1],null,"INC"); 
break;
case 101:
 this.$ = new Operation(0,0,$$[$0-1],null,"DEC"); 
break;
case 102:
 this.$ = new TObject(0,0,$$[$0],"NUMBER"); 
break;
case 103:
 this.$ = new TObject(0,0,$$[$0].substring(1,$$[$0].length-1),"STRING"); 
break;
case 104: case 105:
 this.$ = new TObject(0,0,$$[$0],"BOOLEAN"); 
break;
case 106:
 this.$ = new TObject(0,0,$$[$0],"NULL"); 
break;
case 107:
 this.$ = new TObject(0,0,$$[$0],"UNDEFINED"); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,11:$V1,12:$V2,17:9,18:10,19:11,20:12,21:13,22:14,29:$V3,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{1:[3]},{5:[1,24],6:25,7:4,8:5,9:$V0,11:$V1,12:$V2,17:9,18:10,19:11,20:12,21:13,22:14,29:$V3,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),{10:[1,26],23:[1,27],60:$Vc},{10:[1,29]},{9:[1,30]},o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),{9:[1,31]},{9:[1,32]},{23:[1,33]},{23:[1,34]},{14:[1,35]},{23:[1,36]},{23:[1,37]},{9:[2,72]},{9:[2,73]},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,6]),{9:$Vd,14:$Ve,23:$Vf,24:38,25:$Vg,26:39,28:40,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{10:[1,53]},o($Vb,[2,7]),{13:[1,54]},{10:[2,76],13:[1,57],31:[1,56],59:55},{14:[1,60],30:58,31:[1,59]},{9:$Vd,14:$Ve,23:$Vf,28:61,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:62,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{8:66,9:$Vq,11:$Vr,17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,33:63,34:64,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{9:$Vd,14:$Ve,23:$Vf,28:78,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{8:79,9:[1,81],54:80,58:15,66:$V9,67:$Va},{25:[1,82]},{25:[2,16],27:[1,83]},o($Vw,[2,19],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN}),{9:$Vd,14:$Ve,23:$Vf,28:101,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:102,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:103,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},o($VO,[2,102]),o($VO,[2,103]),o($VO,[2,104]),o($VO,[2,105]),o($VO,[2,106]),o($VO,[2,107]),o($VO,[2,109],{23:[1,105],62:[1,104]}),{9:$Vd,14:$Ve,23:$Vf,28:108,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp,97:106,98:[2,114],100:107},{9:$VP,16:[2,118],99:109,101:110,102:111},o($VQ,[2,62]),{14:[1,113]},{10:[1,114]},{9:$VR,32:115,68:$VS,69:$VT,70:$VU,71:$VV},{9:$Vd,14:$Ve,23:$Vf,28:121,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},o($VW,[2,20]),{9:$VR,32:122,68:$VS,69:$VT,70:$VU,71:$VV},{8:66,9:$Vq,11:$Vr,17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,33:123,34:64,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{25:[1,124],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},{25:[1,125],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},{8:66,9:$Vq,11:$Vr,16:[1,126],17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,34:127,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},o($VX,[2,24]),o($VX,[2,25]),o($VX,[2,26]),{10:[1,128],60:$Vc},{10:[1,129]},o($VX,[2,29]),o($VX,[2,30]),o($VX,[2,31]),o($VX,[2,32]),o($VX,[2,33]),o($VX,[2,34]),o($VX,[2,35]),o($VX,[2,36]),{9:$Vd,10:[1,130],14:$Ve,23:$Vf,28:131,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{25:[1,132],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},o($VY,[2,59],{10:[1,133]}),{55:134,56:[1,135],57:[1,136]},o($VY,[2,60],{60:$Vc}),{10:[1,137]},{9:$Vd,14:$Ve,23:$Vf,28:138,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:139,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:140,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:141,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:142,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:143,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:144,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:145,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:146,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:147,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:148,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:149,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:150,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:151,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:152,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:153,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},o($VO,[2,100]),o($VO,[2,101]),o($VO,[2,86]),o($VO,[2,97]),{25:[1,154],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},{9:[1,155]},{9:$Vd,14:$Ve,23:$Vf,24:156,25:$Vg,26:39,28:40,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{98:[1,157]},{27:[1,158],98:[2,113]},o($VZ,[2,116],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN}),{16:[1,159]},{10:$V_,16:[2,117],27:$V$,64:160},o($V01,[2,120]),{31:[1,163]},{9:$V11,15:164,16:[2,66],63:165,65:166},o($VQ,[2,61]),{13:[1,168]},o($V21,[2,77]),o($V21,[2,78]),o($V21,[2,79]),o($V21,[2,80]),o($V21,[2,81]),{10:[2,75],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},{14:[1,169]},{8:66,9:$Vq,11:$Vr,16:[1,170],17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,34:127,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{14:[1,171]},{14:[1,172]},{43:[1,173]},o($VX,[2,23]),o($VX,[2,27]),o($VX,[2,28]),o($VX,[2,37]),{10:[1,174],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},{14:[1,175]},{9:$Vd,14:$Ve,23:$Vf,28:176,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:[1,177]},{9:[2,57]},{9:[2,58]},o($Vb,[2,15]),o($Vw,[2,18],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN}),o($V31,[2,82],{74:$Vz,75:$VA,76:$VB,77:$VC,88:$VM,89:$VN}),o($V31,[2,83],{74:$Vz,75:$VA,76:$VB,77:$VC,88:$VM,89:$VN}),o($V41,[2,84],{76:$VB,88:$VM,89:$VN}),o($V41,[2,85],{76:$VB,88:$VM,89:$VN}),o($VO,[2,87]),o($V41,[2,88],{76:$VB,88:$VM,89:$VN}),o($V51,[2,89],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,88:$VM,89:$VN}),o($V51,[2,90],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,88:$VM,89:$VN}),o($V51,[2,91],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,88:$VM,89:$VN}),o($V51,[2,92],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,88:$VM,89:$VN}),o($V51,[2,93],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,88:$VM,89:$VN}),o($V51,[2,94],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,88:$VM,89:$VN}),o([10,16,25,27,31,84,85,87,98],[2,95],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,88:$VM,89:$VN}),o([10,16,25,27,31,85,87,98],[2,96],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,88:$VM,89:$VN}),{31:[1,178],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},o($VO,[2,98]),o($VO,[2,108]),{25:[1,179]},o($VO,[2,111]),{9:$Vd,14:$Ve,23:$Vf,28:180,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},o($VO,[2,112]),{9:$VP,102:181},{9:[2,69]},{9:[2,70]},{9:$Vd,14:$Ve,23:$Vf,28:182,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{16:[1,183]},{10:$V_,16:[2,65],27:$V$,64:184},o($V01,[2,68]),{31:[1,185]},{9:$Vd,14:$Ve,23:$Vf,28:186,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{8:66,9:$Vq,11:$Vr,17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,33:187,34:64,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},o($VW,[2,22]),{8:66,9:$Vq,11:$Vr,17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,33:188,34:64,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{8:66,9:$Vq,11:$Vr,17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,33:189,34:64,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{23:[1,190]},o($VX,[2,38]),{46:191,48:192,49:$V61,52:[2,48]},{10:[1,194],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},{25:[1,195]},{9:$Vd,14:$Ve,23:$Vf,28:196,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},o($VO,[2,110]),o($VZ,[2,115],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN}),o($V01,[2,119]),o($V01,[2,121],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN}),o($Vb,[2,8]),{9:$V11,65:197},{9:$VR,32:198,68:$VS,69:$VT,70:$VU,71:$VV},{10:[2,74],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},{8:66,9:$Vq,11:$Vr,16:[1,199],17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,34:127,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{8:66,9:$Vq,11:$Vr,16:[1,200],17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,34:127,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{8:66,9:$Vq,11:$Vr,16:[1,201],17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,34:127,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{9:$Vd,14:$Ve,23:$Vf,28:202,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{47:203,50:204,52:[1,205]},{49:$V71,52:[2,47]},{9:$Vd,14:$Ve,23:$Vf,28:207,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:208,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{14:[1,209]},o([10,16,25,27,31,98],[2,99],{72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN}),o($V01,[2,67]),o($V01,[2,71]),o($VW,[2,21]),o($VW,$V81,{40:210,41:$V91}),o($VW,[2,44]),{25:[1,212],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},{16:[1,213]},{16:[2,54],48:215,49:$V61,51:214},{31:[1,216]},{9:$Vd,14:$Ve,23:$Vf,28:217,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{31:[1,218],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},{25:[1,219],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},{8:66,9:$Vq,11:$Vr,17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,33:220,34:64,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},o($VW,[2,39]),{14:[1,223],39:[1,222],42:221},{10:[1,224]},o($VW,[2,46]),{16:[2,51]},{16:[2,53],49:$V71},{8:66,9:$Vq,11:$Vr,17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,33:225,34:64,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{31:[1,226],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},{8:66,9:$Vq,11:$Vr,17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,33:227,34:64,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{14:[1,228]},{8:66,9:$Vq,11:$Vr,16:[1,229],17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,34:127,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},o($VW,[2,40]),{23:[1,230]},{8:66,9:$Vq,11:$Vr,17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,33:231,34:64,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},o($VW,[2,45]),o([16,49],[2,52],{58:15,8:66,17:69,18:70,19:71,20:72,21:73,22:74,34:127,9:$Vq,11:$Vr,29:$V3,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,66:$V9,67:$Va}),{8:66,9:$Vq,11:$Vr,17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,33:232,34:64,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},o($Va1,[2,50],{58:15,8:66,17:69,18:70,19:71,20:72,21:73,22:74,34:127,9:$Vq,11:$Vr,29:$V3,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,66:$V9,67:$Va}),{8:66,9:$Vq,11:$Vr,17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,33:233,34:64,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},o($VW,[2,56]),{9:$Vd,14:$Ve,23:$Vf,28:234,73:$Vh,86:$Vi,90:$Vj,91:$Vk,92:$Vl,93:$Vm,94:$Vn,95:$Vo,96:$Vp},{8:66,9:$Vq,11:$Vr,16:[1,235],17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,34:127,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},o($Va1,[2,49],{58:15,8:66,17:69,18:70,19:71,20:72,21:73,22:74,34:127,9:$Vq,11:$Vr,29:$V3,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,66:$V9,67:$Va}),{8:66,9:$Vq,11:$Vr,16:[1,236],17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,34:127,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{25:[1,237],72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD,79:$VE,80:$VF,81:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,87:$VL,88:$VM,89:$VN},o($VW,[2,43]),o($VW,[2,55]),{14:[1,238]},{8:66,9:$Vq,11:$Vr,17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,33:239,34:64,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},{8:66,9:$Vq,11:$Vr,16:[1,240],17:69,18:70,19:71,20:72,21:73,22:74,29:$V3,34:127,35:$Vs,36:$Vt,37:$Vu,38:$Vv,39:$V4,43:$V5,44:$V6,45:$V7,53:$V8,58:15,66:$V9,67:$Va},o($VW,$V81,{40:241,41:$V91}),o($VW,[2,42])],
defaultActions: {22:[2,72],23:[2,73],24:[2,1],135:[2,57],136:[2,58],161:[2,69],162:[2,70],214:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const callFunction = require('./callFunction.js');
    const TObject = require('./TObject.js');
	const Operation = require('./Operation.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 37;
break;
case 1:return 36;
break;
case 2:return 94;
break;
case 3:return 12;
break;
case 4:return 67;
break;
case 5:return 66;
break;
case 6:return 67;
break;
case 7:return 29;
break;
case 8:return 39;
break;
case 9:return 41;
break;
case 10:return 43;
break;
case 11:return 44;
break;
case 12:return 45;
break;
case 13:return 49;
break;
case 14:return 52;
break;
case 15:return 53;
break;
case 16:return 56;
break;
case 17:return 57;
break;
case 18:return 68;
break;
case 19:return 69;
break;
case 20:return 70;
break;
case 21:return 71;
break;
case 22:return 92;
break;
case 23:return 93;
break;
case 24:return 95;
break;
case 25:return 14;
break;
case 26:return 16;
break;
case 27:return 23;
break;
case 28:return 25;
break;
case 29:return 27;
break;
case 30:return 10;
break;
case 31:return 31;
break;
case 32:return 62;
break;
case 33:return 88;
break;
case 34:return 89;
break;
case 35:return 72;
break;
case 36:return 73;
break;
case 37:return 76;
break;
case 38:return 74;
break;
case 39:return 75;
break;
case 40:return 77;
break;
case 41:return 80;
break;
case 42:return 81;
break;
case 43:return 78;
break;
case 44:return 79;
break;
case 45:return 82;
break;
case 46:return 13;
break;
case 47:return 83;
break;
case 48:return 84;
break;
case 49:return 85;
break;
case 50:return 86;
break;
case 51:return 87;
break;
case 52:return 96;
break;
case 53:return 98;
break;
case 54:
break;
case 55:
break;
case 56:return 90;
break;
case 57:return 91;
break;
case 58:return 9;
break;
case 59:return 5;
break;
case 60: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:continue\b)/,/^(?:break\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:([a-zA-Z$._])[a-zA-Z0-9_$.]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}