/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,7],$V2=[1,8],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[5,9,11,12,29,41,45,46,47,55,68,69],$Vc=[1,28],$Vd=[1,50],$Ve=[1,52],$Vf=[1,43],$Vg=[2,17],$Vh=[1,41],$Vi=[1,42],$Vj=[1,44],$Vk=[1,45],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,51],$Vq=[1,65],$Vr=[1,66],$Vs=[1,63],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[25,27],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[1,96],$VM=[1,97],$VN=[1,98],$VO=[10,16,25,27,32,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,100],$VP=[1,110],$VQ=[5,9,10,11,12,16,29,37,38,39,40,41,45,46,47,51,54,55,58,59,68,69],$VR=[1,118],$VS=[1,114],$VT=[1,115],$VU=[1,116],$VV=[1,117],$VW=[9,11,16,29,37,38,39,40,41,45,46,47,51,54,55,68,69],$VX=[58,59],$VY=[27,100],$VZ=[1,161],$V_=[1,160],$V$=[10,16,27],$V01=[1,166],$V11=[10,13,14,16,25,27],$V21=[10,16,25,27,32,74,75,80,81,82,83,84,85,86,87,89,100],$V31=[10,16,25,27,32,74,75,76,77,79,80,81,82,83,84,85,86,87,89,100],$V41=[10,16,25,27,32,80,81,82,83,84,85,86,87,89,100],$V51=[1,197],$V61=[5,9,11,12,16,29,37,38,39,40,41,45,46,47,51,54,55,68,69],$V71=[1,212],$V81=[2,45],$V91=[1,220],$Va1=[16,51,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Bloque":4,"EOF":5,"Instruccion":6,"llamadaFuncion":7,"variables":8,"id":9,"semicolon":10,"id--":11,"Type":12,"igual":13,"curlyBraceOpen":14,"parsObj":15,"curlyBraceClose":16,"funciones":17,"IF":18,"WHILE":19,"DOWHILE":20,"SWITCH":21,"FOR":22,"bracketOpen":23,"paramFunc":24,"bracketClose":25,"paramFuncList":26,"comma":27,"exp":28,"function":29,"funcParam":30,"funcDec":31,"dosPuntos":32,"types":33,"STMT":34,"funcParamList":35,"InstruccionI":36,"llamadFuncion":37,"Break":38,"Continue":39,"return":40,"if":41,"IFLAST":42,"else":43,"IFCOND":44,"while":45,"do":46,"switch":47,"FIRSTCASE":48,"LASTCASE":49,"CASE":50,"case":51,"DEFCASE":52,"ENDCASE":53,"default":54,"for":55,"forDec":56,"forOP":57,"in":58,"of":59,"defType":60,"defLast":61,"asgnLast":62,"asignLast":63,"point":64,"objType":65,"opkv":66,"keyvalueT":67,"let":68,"const":69,"number":70,"boolean":71,"string":72,"void":73,"mas":74,"menos":75,"por":76,"division":77,"potencia":78,"modulo":79,"mayorque":80,"menorque":81,"mayorigualque":82,"menorigualque":83,"igualdad":84,"diferencia":85,"and":86,"or":87,"not":88,"question":89,"increment":90,"decrement":91,"NUMBER":92,"STRING":93,"true":94,"false":95,"null":96,"undefined":97,"sqBracketOpen":98,"arrParam":99,"sqBracketClose":100,"objetoParam":101,"listArrParam":102,"objetoParamList":103,"keyvalue":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"id",10:"semicolon",11:"id--",12:"Type",13:"igual",14:"curlyBraceOpen",16:"curlyBraceClose",23:"bracketOpen",25:"bracketClose",27:"comma",29:"function",32:"dosPuntos",37:"llamadFuncion",38:"Break",39:"Continue",40:"return",41:"if",43:"else",45:"while",46:"do",47:"switch",51:"case",54:"default",55:"for",58:"in",59:"of",62:"asgnLast",64:"point",68:"let",69:"const",70:"number",71:"boolean",72:"string",73:"void",74:"mas",75:"menos",76:"por",77:"division",78:"potencia",79:"modulo",80:"mayorque",81:"menorque",82:"mayorigualque",83:"menorigualque",84:"igualdad",85:"diferencia",86:"and",87:"or",88:"not",89:"question",90:"increment",91:"decrement",92:"NUMBER",93:"STRING",94:"true",95:"false",96:"null",97:"undefined",98:"sqBracketOpen",100:"sqBracketClose"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,2],[6,6],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[24,1],[24,0],[26,3],[26,1],[17,6],[31,5],[31,3],[30,1],[30,0],[35,5],[35,3],[34,2],[34,1],[36,1],[36,1],[36,2],[36,2],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,2],[36,3],[18,8],[42,2],[42,0],[44,8],[44,3],[19,7],[20,9],[21,8],[48,1],[48,0],[50,5],[50,4],[49,2],[52,3],[53,1],[53,0],[22,11],[22,9],[57,1],[57,1],[56,1],[56,1],[8,4],[8,3],[63,4],[63,2],[15,1],[15,0],[65,3],[65,1],[66,1],[66,1],[67,3],[60,1],[60,1],[61,4],[61,2],[61,0],[33,1],[33,1],[33,1],[33,1],[33,1],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,5],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,3],[28,1],[28,4],[28,3],[28,3],[99,1],[99,0],[102,3],[102,1],[101,1],[101,0],[103,3],[103,1],[104,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$=[$$[$0]]; 
break;
case 4:
 this.$ = $$[$0]; 
break;
case 15:
 this.$ = new callFunction(0,0,$$[$0-4],$$[$0-2]); 
break;
case 16:
this.$ = $$[$0];
break;
case 17:
this.$ = null;
break;
case 18:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 19:
this.$ = [$$[$0]];
break;
case 65:
 this.$ = new Variable(0,0,$$[$0-3],$$[$0-2],); 
break;
case 76: case 77:
 this.$ = String($$[$0]); 
break;
case 86: case 87: case 88: case 89: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 102:
 this.$ = String($$[$0-2] + $$[$0-1] + $$[$0]); 
break;
case 90: case 101: case 104: case 105:
 this.$ = String($$[$0-1] + $$[$0]); 
break;
case 103:
 this.$ = String($$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]); 
break;
case 106: case 107: case 108: case 109: case 110: case 111: case 113:
 this.$ = String($$[$0]);
break;
case 112:
this.$ = String($$[$0-2] + $$[$0-1] + $$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,11:$V1,12:$V2,17:9,18:10,19:11,20:12,21:13,22:14,29:$V3,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{1:[3]},{5:[1,24],6:25,7:4,8:5,9:$V0,11:$V1,12:$V2,17:9,18:10,19:11,20:12,21:13,22:14,29:$V3,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),{10:[1,26],23:[1,27],62:$Vc},{10:[1,29]},{9:[1,30]},o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),{9:[1,31]},{9:[1,32]},{23:[1,33]},{23:[1,34]},{14:[1,35]},{23:[1,36]},{23:[1,37]},{9:[2,76]},{9:[2,77]},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,6]),{9:$Vd,14:$Ve,23:$Vf,24:38,25:$Vg,26:39,28:40,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{10:[1,53]},o($Vb,[2,7]),{13:[1,54]},{10:[2,80],13:[1,57],32:[1,56],61:55},{23:[1,58]},{9:$Vd,14:$Ve,23:$Vf,28:59,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:60,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{8:64,9:$Vq,11:$Vr,17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,34:61,36:62,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{9:$Vd,14:$Ve,23:$Vf,28:76,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{8:77,9:[1,79],56:78,60:15,68:$V9,69:$Va},{25:[1,80]},{25:[2,16],27:[1,81]},o($Vw,[2,19],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN}),{9:$Vd,14:$Ve,23:$Vf,28:99,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:100,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:101,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($VO,[2,106]),o($VO,[2,107]),o($VO,[2,108]),o($VO,[2,109]),o($VO,[2,110]),o($VO,[2,111]),o($VO,[2,113],{23:[1,103],64:[1,102]}),{9:$Vd,14:$Ve,23:$Vf,28:106,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp,99:104,100:[2,118],102:105},{9:$VP,16:[2,122],101:107,103:108,104:109},o($VQ,[2,66]),{14:[1,111]},{10:[1,112]},{9:$VR,33:113,70:$VS,71:$VT,72:$VU,73:$VV},{9:$Vd,14:$Ve,23:$Vf,28:119,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:[1,122],25:[2,24],30:120,35:121},{25:[1,123],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},{25:[1,124],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},{8:64,9:$Vq,11:$Vr,16:[1,125],17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,36:126,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},o($VW,[2,28]),o($VW,[2,29]),o($VW,[2,30]),{10:[1,127],62:$Vc},{10:[1,128]},o($VW,[2,33]),o($VW,[2,34]),o($VW,[2,35]),o($VW,[2,36]),o($VW,[2,37]),o($VW,[2,38]),o($VW,[2,39]),o($VW,[2,40]),{9:$Vd,10:[1,129],14:$Ve,23:$Vf,28:130,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{25:[1,131],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},o($VX,[2,63],{10:[1,132]}),{57:133,58:[1,134],59:[1,135]},o($VX,[2,64],{62:$Vc}),{10:[1,136]},{9:$Vd,14:$Ve,23:$Vf,28:137,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:138,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:139,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:140,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:141,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:142,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:143,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:144,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:145,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:146,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:147,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:148,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:149,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:150,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:151,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:152,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($VO,[2,104]),o($VO,[2,105]),o($VO,[2,90]),o($VO,[2,101]),{25:[1,153],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},{9:[1,154]},{9:$Vd,14:$Ve,23:$Vf,24:155,25:$Vg,26:39,28:40,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{100:[1,156]},{27:[1,157],100:[2,117]},o($VY,[2,120],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN}),{16:[1,158]},{10:$VZ,16:[2,121],27:$V_,66:159},o($V$,[2,124]),{32:[1,162]},{9:$V01,15:163,16:[2,70],65:164,67:165},o($VQ,[2,65]),{13:[1,167]},o($V11,[2,81]),o($V11,[2,82]),o($V11,[2,83]),o($V11,[2,84]),o($V11,[2,85]),{10:[2,79],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},{25:[1,168]},{25:[2,23],27:[1,169]},{32:[1,170]},{14:[1,171]},{14:[1,172]},{45:[1,173]},o($VW,[2,27]),o($VW,[2,31]),o($VW,[2,32]),o($VW,[2,41]),{10:[1,174],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},{14:[1,175]},{9:$Vd,14:$Ve,23:$Vf,28:176,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:[1,177]},{9:[2,61]},{9:[2,62]},o($Vb,[2,15]),o($Vw,[2,18],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN}),o($V21,[2,86],{76:$Vz,77:$VA,78:$VB,79:$VC,90:$VM,91:$VN}),o($V21,[2,87],{76:$Vz,77:$VA,78:$VB,79:$VC,90:$VM,91:$VN}),o($V31,[2,88],{78:$VB,90:$VM,91:$VN}),o($V31,[2,89],{78:$VB,90:$VM,91:$VN}),o($VO,[2,91]),o($V31,[2,92],{78:$VB,90:$VM,91:$VN}),o($V41,[2,93],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,90:$VM,91:$VN}),o($V41,[2,94],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,90:$VM,91:$VN}),o($V41,[2,95],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,90:$VM,91:$VN}),o($V41,[2,96],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,90:$VM,91:$VN}),o($V41,[2,97],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,90:$VM,91:$VN}),o($V41,[2,98],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,90:$VM,91:$VN}),o([10,16,25,27,32,86,87,89,100],[2,99],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,90:$VM,91:$VN}),o([10,16,25,27,32,87,89,100],[2,100],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,90:$VM,91:$VN}),{32:[1,178],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},o($VO,[2,102]),o($VO,[2,112]),{25:[1,179]},o($VO,[2,115]),{9:$Vd,14:$Ve,23:$Vf,28:180,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($VO,[2,116]),{9:$VP,104:181},{9:[2,73]},{9:[2,74]},{9:$Vd,14:$Ve,23:$Vf,28:182,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{16:[1,183]},{10:$VZ,16:[2,69],27:$V_,66:184},o($V$,[2,72]),{32:[1,185]},{9:$Vd,14:$Ve,23:$Vf,28:186,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{14:[1,189],31:187,32:[1,188]},{9:[1,190]},{9:$VR,33:191,70:$VS,71:$VT,72:$VU,73:$VV},{8:64,9:$Vq,11:$Vr,17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,34:192,36:62,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{8:64,9:$Vq,11:$Vr,17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,34:193,36:62,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{23:[1,194]},o($VW,[2,42]),{48:195,50:196,51:$V51,54:[2,52]},{10:[1,198],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},{25:[1,199]},{9:$Vd,14:$Ve,23:$Vf,28:200,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},o($VO,[2,114]),o($VY,[2,119],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN}),o($V$,[2,123]),o($V$,[2,125],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN}),o($Vb,[2,8]),{9:$V01,67:201},{9:$VR,33:202,70:$VS,71:$VT,72:$VU,73:$VV},{10:[2,78],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},o($V61,[2,20]),{9:$VR,33:203,70:$VS,71:$VT,72:$VU,73:$VV},{8:64,9:$Vq,11:$Vr,17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,34:204,36:62,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{32:[1,205]},o($Vw,[2,26]),{8:64,9:$Vq,11:$Vr,16:[1,206],17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,36:126,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{8:64,9:$Vq,11:$Vr,16:[1,207],17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,36:126,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{9:$Vd,14:$Ve,23:$Vf,28:208,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{49:209,52:210,54:[1,211]},{51:$V71,54:[2,51]},{9:$Vd,14:$Ve,23:$Vf,28:213,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{9:$Vd,14:$Ve,23:$Vf,28:214,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{14:[1,215]},o([10,16,25,27,32,100],[2,103],{74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN}),o($V$,[2,71]),o($V$,[2,75]),{14:[1,216]},{8:64,9:$Vq,11:$Vr,16:[1,217],17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,36:126,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{9:$VR,33:218,70:$VS,71:$VT,72:$VU,73:$VV},o($V61,$V81,{42:219,43:$V91}),o($V61,[2,48]),{25:[1,221],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},{16:[1,222]},{16:[2,58],50:224,51:$V51,53:223},{32:[1,225]},{9:$Vd,14:$Ve,23:$Vf,28:226,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{32:[1,227],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},{25:[1,228],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},{8:64,9:$Vq,11:$Vr,17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,34:229,36:62,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{8:64,9:$Vq,11:$Vr,17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,34:230,36:62,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},o($V61,[2,22]),o($Vw,[2,25]),o($V61,[2,43]),{14:[1,233],41:[1,232],44:231},{10:[1,234]},o($V61,[2,50]),{16:[2,55]},{16:[2,57],51:$V71},{8:64,9:$Vq,11:$Vr,17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,34:235,36:62,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{32:[1,236],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},{8:64,9:$Vq,11:$Vr,17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,34:237,36:62,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{14:[1,238]},{8:64,9:$Vq,11:$Vr,16:[1,239],17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,36:126,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{8:64,9:$Vq,11:$Vr,16:[1,240],17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,36:126,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},o($V61,[2,44]),{23:[1,241]},{8:64,9:$Vq,11:$Vr,17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,34:242,36:62,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},o($V61,[2,49]),o([16,51],[2,56],{60:15,8:64,17:67,18:68,19:69,20:70,21:71,22:72,36:126,9:$Vq,11:$Vr,29:$V3,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,68:$V9,69:$Va}),{8:64,9:$Vq,11:$Vr,17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,34:243,36:62,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},o($Va1,[2,54],{60:15,8:64,17:67,18:68,19:69,20:70,21:71,22:72,36:126,9:$Vq,11:$Vr,29:$V3,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,68:$V9,69:$Va}),{8:64,9:$Vq,11:$Vr,17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,34:244,36:62,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},o($V61,[2,60]),o($V61,[2,21]),{9:$Vd,14:$Ve,23:$Vf,28:245,75:$Vh,88:$Vi,92:$Vj,93:$Vk,94:$Vl,95:$Vm,96:$Vn,97:$Vo,98:$Vp},{8:64,9:$Vq,11:$Vr,16:[1,246],17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,36:126,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},o($Va1,[2,53],{60:15,8:64,17:67,18:68,19:69,20:70,21:71,22:72,36:126,9:$Vq,11:$Vr,29:$V3,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,68:$V9,69:$Va}),{8:64,9:$Vq,11:$Vr,16:[1,247],17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,36:126,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{25:[1,248],74:$Vx,75:$Vy,76:$Vz,77:$VA,78:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,89:$VL,90:$VM,91:$VN},o($V61,[2,47]),o($V61,[2,59]),{14:[1,249]},{8:64,9:$Vq,11:$Vr,17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,34:250,36:62,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},{8:64,9:$Vq,11:$Vr,16:[1,251],17:67,18:68,19:69,20:70,21:71,22:72,29:$V3,36:126,37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$V4,45:$V5,46:$V6,47:$V7,55:$V8,60:15,68:$V9,69:$Va},o($V61,$V81,{42:252,43:$V91}),o($V61,[2,46])],
defaultActions: {22:[2,76],23:[2,77],24:[2,1],134:[2,61],135:[2,62],160:[2,73],161:[2,74],223:[2,55]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const callFunction = require('./callFunction.js');
    const TObject = require('./TObject.js');
	const Operation = require('./Operation.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 39;
break;
case 1:return 38;
break;
case 2:return 96;
break;
case 3:return 12;
break;
case 4:return 69;
break;
case 5:return 68;
break;
case 6:return 69;
break;
case 7:return 29;
break;
case 8:return 41;
break;
case 9:return 43;
break;
case 10:return 45;
break;
case 11:return 46;
break;
case 12:return 47;
break;
case 13:return 51;
break;
case 14:return 54;
break;
case 15:return 55;
break;
case 16:return 58;
break;
case 17:return 59;
break;
case 18:return 70;
break;
case 19:return 71;
break;
case 20:return 72;
break;
case 21:return 73;
break;
case 22:return 94;
break;
case 23:return 95;
break;
case 24:return 97;
break;
case 25:return 14;
break;
case 26:return 16;
break;
case 27:return 23;
break;
case 28:return 25;
break;
case 29:return 27;
break;
case 30:return 10;
break;
case 31:return 32;
break;
case 32:return 64;
break;
case 33:return 90;
break;
case 34:return 91;
break;
case 35:return 74;
break;
case 36:return 75;
break;
case 37:return 78;
break;
case 38:return 76;
break;
case 39:return 77;
break;
case 40:return 79;
break;
case 41:return 82;
break;
case 42:return 83;
break;
case 43:return 80;
break;
case 44:return 81;
break;
case 45:return 84;
break;
case 46:return 13;
break;
case 47:return 85;
break;
case 48:return 86;
break;
case 49:return 87;
break;
case 50:return 88;
break;
case 51:return 89;
break;
case 52:return 98;
break;
case 53:return 100;
break;
case 54:
break;
case 55:
break;
case 56:return 92;
break;
case 57:return 93;
break;
case 58:return 9;
break;
case 59:return 5;
break;
case 60: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:continue\b)/,/^(?:break\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:([a-zA-Z$._])[a-zA-Z0-9_$.]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}