/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,13],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[5,9,10,30,42,47,48,49,57,58,83],$Vb=[1,32],$Vc=[2,15],$Vd=[1,30],$Ve=[1,31],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[5,9,10,14,30,38,39,40,42,47,48,49,53,56,57,58,83],$Vm=[2,14],$Vn=[5,9,10,14,25,30,38,39,40,42,47,48,49,53,56,57,58,83],$Vo=[1,60],$Vp=[1,53],$Vq=[1,61],$Vr=[1,51],$Vs=[1,52],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,65],$VA=[25,28],$VB=[2,101],$VC=[1,72],$VD=[1,71],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[2,17],$VI=[1,112],$VJ=[1,113],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[1,100],$VO=[1,101],$VP=[1,102],$VQ=[1,103],$VR=[1,104],$VS=[1,105],$VT=[1,106],$VU=[1,107],$VV=[1,108],$VW=[1,109],$VX=[1,110],$VY=[1,111],$VZ=[5,9,10,11,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,61,62,71,78,79,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106],$V_=[2,148],$V$=[5,9,10,11,14,22,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,61,62,71,74,75,76,77,78,79,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106],$V01=[2,82],$V11=[5,9,10,14,24,25,28,30,38,39,40,42,47,48,49,53,56,57,58,71,83],$V21=[1,127],$V31=[1,135],$V41=[1,131],$V51=[1,132],$V61=[1,133],$V71=[1,134],$V81=[10,14,30,38,39,40,42,47,48,49,53,56,57,58,83],$V91=[1,154],$Va1=[1,155],$Vb1=[1,159],$Vc1=[24,28],$Vd1=[28,71],$Ve1=[1,185],$Vf1=[1,184],$Vg1=[14,25,28],$Vh1=[11,12,14,24,25,28],$Vi1=[2,108],$Vj1=[1,193],$Vk1=[10,22,70,92,105,107,108,109,110,111,112],$Vl1=[5,9,10,11,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,61,62,71,83,91,92,97,98,99,100,101,102,103,104,106],$Vm1=[5,9,10,11,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,61,62,71,83,91,92,93,94,96,97,98,99,100,101,102,103,104,106],$Vn1=[5,9,10,11,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,61,62,71,83,97,98,99,100,101,102,103,104,106],$Vo1=[1,239],$Vp1=[11,12,14,24,25,28,70],$Vq1=[1,262],$Vr1=[2,44],$Vs1=[1,276],$Vt1=[5,9,10,11,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,61,62,70,71,78,79,83,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106],$Vu1=[14,53,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Bloque":4,"EOF":5,"Instruccion":6,"llamadaFuncion":7,"variables":8,"Type":9,"id":10,"igual":11,"curlyBraceOpen":12,"parsObj":13,"curlyBraceClose":14,"funciones":15,"IF":16,"WHILE":17,"DOWHILE":18,"SWITCH":19,"FOR":20,"PL":21,"bracketOpen":22,"paramFunc":23,"bracketClose":24,"semicolon":25,"varLast":26,"paramFuncList":27,"comma":28,"E":29,"function":30,"funcParam":31,"funcDec":32,"dosPuntos":33,"types":34,"STMT":35,"funcParamList":36,"InstruccionI":37,"Break":38,"Continue":39,"return":40,"OP":41,"if":42,"exp":43,"IFLAST":44,"else":45,"IFCOND":46,"while":47,"do":48,"switch":49,"FIRSTCASE":50,"LASTCASE":51,"CASE":52,"case":53,"DEFCASE":54,"ENDCASE":55,"default":56,"for":57,"let":58,"forOP":59,"forFDeclaracion":60,"in":61,"of":62,"forDec":63,"defVarLast":64,"defVarLastP":65,"defLast":66,"defType":67,"asignLast":68,"asignLastF":69,"sqBracketOpen":70,"sqBracketClose":71,"auxP":72,"point":73,"masIgual":74,"menosIgual":75,"porIgual":76,"divisionIgual":77,"increment":78,"decrement":79,"objType":80,"opkv":81,"keyvalueT":82,"const":83,"number":84,"typesList":85,"boolean":86,"string":87,"void":88,"typesL":89,"objetoParam":90,"mas":91,"menos":92,"por":93,"division":94,"potencia":95,"modulo":96,"mayorque":97,"menorque":98,"mayorigualque":99,"menorigualque":100,"igualdad":101,"diferencia":102,"and":103,"or":104,"not":105,"question":106,"NUMBER":107,"STRING":108,"true":109,"false":110,"null":111,"undefined":112,"arrParam":113,"sqBCKFIN":114,"sqBckList":115,"listArrParam":116,"objetoParamList":117,"keyvalue":118,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"Type",10:"id",11:"igual",12:"curlyBraceOpen",14:"curlyBraceClose",22:"bracketOpen",24:"bracketClose",25:"semicolon",28:"comma",30:"function",33:"dosPuntos",38:"Break",39:"Continue",40:"return",42:"if",45:"else",47:"while",48:"do",49:"switch",53:"case",56:"default",57:"for",58:"let",61:"in",62:"of",70:"sqBracketOpen",71:"sqBracketClose",73:"point",74:"masIgual",75:"menosIgual",76:"porIgual",77:"divisionIgual",78:"increment",79:"decrement",83:"const",84:"number",86:"boolean",87:"string",88:"void",91:"mas",92:"menos",93:"por",94:"division",95:"potencia",96:"modulo",97:"mayorque",98:"menorque",99:"mayorigualque",100:"menorigualque",101:"igualdad",102:"diferencia",103:"and",104:"or",105:"not",106:"question",107:"NUMBER",108:"STRING",109:"true",110:"false",111:"null",112:"undefined"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,6],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,6],[21,1],[21,0],[23,1],[23,0],[27,3],[27,1],[15,6],[32,5],[32,3],[31,1],[31,0],[36,5],[36,3],[35,2],[35,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,2],[37,2],[37,2],[41,2],[41,1],[16,8],[44,2],[44,0],[46,8],[46,3],[17,7],[18,9],[19,8],[50,1],[50,0],[52,5],[52,4],[51,2],[54,3],[55,1],[55,0],[20,14],[20,13],[20,11],[20,10],[20,9],[60,4],[60,3],[60,1],[59,1],[59,1],[63,1],[63,1],[64,2],[64,0],[65,4],[65,2],[8,5],[8,3],[8,2],[68,2],[68,1],[26,4],[26,3],[72,1],[72,0],[69,2],[69,2],[69,2],[69,2],[69,2],[69,1],[69,1],[13,1],[13,0],[80,3],[80,1],[81,1],[81,1],[82,3],[67,1],[67,1],[66,4],[66,2],[66,0],[34,2],[34,2],[34,2],[34,2],[34,2],[85,1],[85,0],[89,3],[89,2],[29,1],[29,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[43,3],[43,5],[43,2],[43,2],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,2],[43,1],[43,5],[43,4],[114,1],[114,0],[115,4],[115,3],[113,1],[113,0],[116,3],[116,1],[90,1],[90,0],[117,3],[117,1],[118,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {ast:$$[$0-1],inner:functionTable}; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 14: case 23: case 41: case 50: case 56: case 66: case 67: case 68: case 69: case 78: case 88: case 89: case 97: case 98: case 107: case 111: case 143: case 147: case 150: case 151: case 154:
 this.$ = $$[$0]; 
break;
case 6:
 this.$ = $$[$0-5] + " " + $$[$0-4] +" "+ $$[$0-3] + " "+ $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0] + "\n\n";
break;
case 7:
 
				/*callFunc = [];
				aux = funcList.length != 0?funcList.join('\n'):"";
				funcList = [];*/
				//ESTO NO
				/*console.log(chalk.blue("este es en func------"))
				console.log(chalk.blue(aux))*/
				/*for(let a in table)
					console.log(table[a]);
				console.log("------------------------------------");*/
				/*this.$ = $$[$0] + "\n"+aux; 
				aux = "";*/

				this.$ = $$[$0];
			
break;
case 8: case 9: case 10: case 11: case 12: case 32: case 33: case 34: case 35: case 36:
 this.$ = $$[$0] + "\n"; 
break;
case 13:
 
	this.$ = new tLlamadaFunciones($$[$0-5],$$[$0-4],$$[$0-2],";");

break;
case 15:
 this.$ = null 
break;
case 16: case 90: case 93: case 94: case 95:
this.$ = $$[$0];
break;
case 17: case 148:
this.$ = null;
break;
case 18:
this.$ = new paramFuncList($$[$0-2],$$[$0-1]);
break;
case 19:
this.$ = new paramFuncList(null,$$[$0]);
break;
case 20:
 
			   
			   /*for(let i =0;i<callFunc.length;i++) {
				   $$[$0] = String($$[$0]).replace(callFunc[i].id,callFunc[i].new_id);
			   }
				
			   this.$ = $$[$0-5] + " " + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];*/
			   /*var a6 = $$[$0].tree
			  	if($$[$0].inner != undefined) {
					  functionTable.push({parent:$$[$0-4],function:$$[$0]});
				}*/	
				if(auxTable.length != 0) {
					for(var i in auxTable) {
						functionTable.push({parent:$$[$0-4],func:auxTable[i]});
					}
					auxTable = [];
				}
			   this.$ = new translateFunction($$[$0-4],$$[$0],$$[$0-5] + " " + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0]);
			   
			
break;
case 21:
 
			/*console.log(chalk.green("FUNCION"));*/
			//s = eval('$$');
			var f = eval('$$');
			//console.log(chalk.red("LA PILA"))
			var value;
			var index = 0;
			var parentId = f[2];
			for(let i in f) {
				if(Array.isArray(f[i])) {
					value = f[i];
				}
			}
			if(index != 0) {
				//console.log(chalk.blue(f[index]));
			}
			//console.log(chalk.red("-----------------------"))
			var listStmt = [];
			var innerFunctions = [];
			for(let i in value) {
				//console.log(value[i])
				if(value[i].constructor.name == "translateFunction")
					auxTable.push(value[i])
				else
					listStmt.push(value[i]);
				//console.log(chalk.green("#########"));
			}
			//console.log(chalk.red(" -----------------------------"))
			/*st = s.slice(s.indexOf("function")+1,s.length);
			s = st[0]
			aux = st.indexOf("function");
			st = aux != -1?st.slice(aux,st.length):"";
			aux = st != ""?"__" + s +"__"+st[1]:"";
			if(st != "") {
				callFunc.push({id:st[1],new_id:aux});
				st[1] = aux;
				let tab = st.indexOf("{");
				st[tab] = "{\n";
				
			}
			st = st != ""?st.join(' '):"";
			funcList.push(st);
			s="";
			st = "";
			aux = "";
			//console.log(chalk.green("TABLA DE SIMBOLOS"));
			//console.log(table);
			this.$ = $$[$0-4] + " " + $$[$0-3] + " " +$$[$0-2] + "\n" + $$[$0-1] + $$[$0] + "\n";*/
			this.$ =  new funcDec(listStmt,$$[$0-4] + " " + $$[$0-3] + " " +$$[$0-2] + "\n" + $$[$0-1] + $$[$0])
	
		
break;
case 22:

			var f = eval('$$');
			//console.log(chalk.red("LA PILA"))
			var value;
			var index = 0;
			var parentId = f[2];
			for(let i in f) {
				if(Array.isArray(f[i])) {
					value = f[i];
				}
			}
			if(index != 0) {
				//console.log(chalk.blue(f[index]));
			}
			//console.log(chalk.red("-----------------------"))
			var listStmt = [];
			var innerFunctions = [];
			for(let i in value) {
				//console.log(value[i])
				if(value[i].constructor.name == "translateFunction")
					auxTable.push(value[i])
				else
					listStmt.push(value[i]);
				//console.log(chalk.green("#########"));
			}
			this.$ =  new funcDec(listStmt,$$[$0-2] + " " + $$[$0-1] + " " +$$[$0] + "\n" + $$[$01] + $$[$02])
				
		
break;
case 24: case 51: case 57: case 108:
 this.$ = ""; 
break;
case 25:
 this.$=$$[$0-4] + $$[$0-3] + " " + $$[$0-2] + $$[$0-1] + " " + $$[$0];
break;
case 26:
 this.$ = $$[$0-2] + $$[$0-1] + " " + $$[$0]; 
break;
case 27:
 $$[$0-1].push($$[$0]); this.$=$$[$0-1];/*this.$ = $$[$0-1] + $$[$0];*/
break;
case 28:
 this.$ = [$$[$0]];/*this.$ = $$[$0];*/ 
break;
case 29: case 83:
 this.$=$$[$0];
break;
case 30:
this.$=$$[$0];
break;
case 31:

				
				/*table.push({"func":JSON.parse(JSON.stringify(innerTable))});
				
				innerTable = [];
				
				this.$="";*/
				this.$ = $$[$0];
			
break;
case 37: case 38:
 this.$ = $$[$0-1] + $$[$0] + "\n"; 
break;
case 39:
 
				this.$ = new tReturn($$[$0],$$[$0-1] + " " + $$[$0] + "\n");
			
break;
case 40: case 102: case 103: case 104: case 105: case 106:
 this.$ = $$[$0-1];
break;
case 42:
 this.$ = $$[$0-7] + " " + $$[$0-6] + $$[$0-5] + $$[$0-4] + " " + $$[$0-3] + "\n" + $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 43:
 this.$ = " " + $$[$0-1] + " " + $$[$0]; 
break;
case 44:
 this.$ = "\n"; 
break;
case 45:
 this.$ = $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + " " + $$[$0-3] + "\n" + $$[$0-2] + $$[$0-1] + $$[$0];  
break;
case 46:
 this.$ = $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0] + "\n";
break;
case 47:
 
		   
		   this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + " " + $$[$0-2] + "\n" + $$[$0-1]  + $$[$0] + "\n";
		
break;
case 48:
 this.$ = $$[$0-8] + " " + $$[$0-7] + "\n" + $$[$0-6]  + $$[$0-5] + " " + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0] + "\n" 
break;
case 49:
 this.$ = $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + " " + $$[$0-3] + "\n" + $$[$0-2] + "\n" + $$[$0-1] + "\n" + $$[$0] + "\n"; 
break;
case 52:
 this.$ = $$[$0-4] + $$[$0-3] + " " + $$[$0-2] + $$[$0-1] + "\n" + $$[$0] ; 
break;
case 53:
 this.$ = $$[$0-3] + " " + $$[$0-2] + $$[$0-1] + "\n" + $$[$0] + "\n"; 
break;
case 54: case 110:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 55:
 this.$ = $$[$0-2] + $$[$0-1] + "\n" +$$[$0]; 
break;
case 58:
 this.$ = $$[$0-13] + $$[$0-12] + $$[$0-11] + " " + $$[$0-10]+ " " +$$[$0-9]+ " "+$$[$0-8]+$$[$0-7]+" "+$$[$0-6]+$$[$0-5]+ " " +$$[$0-4] + $$[$0-3] + " " + $$[$0-2] + "\n" + $$[$0-1] + $$[$0] + "\n";
break;
case 59:
 this.$ = $$[$0-12] + $$[$0-11] + $$[$0-10]+ " " +$$[$0-9]+ " "+$$[$0-8]+$$[$0-7]+" "+$$[$0-6]+$$[$0-5]+ " " +$$[$0-4] + $$[$0-3] + " " + $$[$0-2] + "\n" + $$[$0-1] + $$[$0] + "\n";
break;
case 60:
 this.$ = $$[$0-10] + $$[$0-9] + $$[$0-8] + $$[$0-7] + " " + $$[$0-6] + $$[$0-5] + " " + $$[$0-4] + $$[$0-3] + " " + $$[$0-2] +"\n" + $$[$0-1] + $$[$0] + "\n";
break;
case 61:
 this.$ = $$[$0-9] + $$[$0-8] + $$[$0-7] + " " + $$[$0-6] + " " + $$[$0-5] + " " + $$[$0-4] + $$[$0-3] + " " + $$[$0-2] + "\n" + $$[$0-1] + $$[$0] + "\n" 
break;
case 62:
 this.$ = $$[$0-8] + $$[$0-7] + $$[$0-6] + " " + $$[$0-5] + " " + $$[$0-4] + $$[$0-3] + " " + $$[$0-2] + "\n" + $$[$0-1] + $$[$0] + "\n" 
break;
case 70:

				this.$ = new defVarLast($$[$0]);
			
break;
case 71:
this.$=null;
break;
case 74:
  
				this.$ = new tAsignVariables($$[$0-3],$$[$0-2],$$[$0-4],$$[$0-1],";");
			
break;
case 75:
 
			  /*console.log("uso " + $$[$0-2]);
			  innerTable.push({tipo:"uso",valor:$$[$0-2]});
			  this.$ = $$[$0-2] + $$[$0-1] + $$[$0];*/
			  this.$ = new tVariables($$[$0-2],$$[$0-1],";");
			
break;
case 76:
 
			  /*console.log("uso " + $$[$0-1]);
			  innerTable.push({tipo:"uso",valor:$$[$0-1]});
			  this.$ = $$[$0-1] + $$[$0];*/
			  this.$ = new tVariables($$[$0-1],$$[$0],"");
		  
break;
case 77:
 this.$ = $$[$0-1] + $$[$0] ;
break;
case 79:
 this.$ = new varArrList($$[$0-2],$$[$0]);
break;
case 80:
 this.$ = new varIdList($$[$0-1],$$[$0]); 
break;
case 81:
 this.$ = $$[$0]
break;
case 82:
 this.$ = null
break;
case 84: case 85: case 86: case 87:
 this.$ = " " + $$[$0-1] + " " + $$[$0];
break;
case 91:
this.$ = "";
break;
case 92:
this.$ = $$[$0-2] + $$[$0-1] + "\n" + $$[$0];
break;
case 96:
 this.$ = "\t" + $$[$0-2] + $$[$0-1] + " "+ $$[$0]; 
break;
case 99:
 this.$ = $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0]
break;
case 100:
 this.$=$$[$0];/*this.$ = " " + $$[$0-1] + " " + $$[$0];*/ 
break;
case 101: case 144:
 this.$ = null; 
break;
case 109:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 112:
    this.$ = new expObject($$[$0-1]);	
break;
case 113: case 114: case 115: case 116: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 126: case 127:
 
		this.$ = new tOperation($$[$0-2],$$[$0-1],$$[$0],$$[$0-2] + $$[$0-1] + $$[$0]);
	
break;
case 117: case 128:
 
		this.$ = new tminus($$[$0-1],$$[$0]);
	
break;
case 129:
 
		this.$ = new expBracket($$[$0-1]);
	
break;
case 130:
 
		this.$ = new ternaryOp($$[$0-4],$$[$0-2],$$[$0]);
	
break;
case 131:

		this.$ = new expRight($$[$0-1],$$[$0]);
	
break;
case 132:
 
		this.$ = new expRight($$[$0-1],$$[$0]);
	
break;
case 133: case 134: case 135: case 136: case 137: case 138:
 
		this.$ = new tnumber($$[$0],$$[$0]);
	
break;
case 139:

		this.$ = new expIdList($$[$0-1],$$[$0]);
	
break;
case 140:
 
		this.$ = new tId($$[$0],null,$$[$0]);
	
break;
case 141:
 
		this.$ = new tLlamadaFunciones($$[$0-4],$$[$0-3],$$[$0-1],"");
	
break;
case 142:
 
		this.$ = new expArrList($$[$0-2],$$[$0]);
	
break;
case 145:
 this.$ = new arrList($$[$0-3],$$[$0-1]); 
break;
case 146:
 this.$ = new arrList(null,$$[$0-1]); 
break;
case 149:
 this.$ = new arrParamList($$[$0-2],$$[$0-1]); 
break;
case 152:
this.$= null;
break;
case 153:
 this.$ = new tObjectParamList($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 155:
 this.$ = new tKeyvalue($$[$0-2],$$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,10:$V1,15:7,16:8,17:9,18:10,19:11,20:12,30:$V2,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{1:[3]},{5:[1,23],6:24,7:4,8:5,9:$V0,10:$V1,15:7,16:8,17:9,18:10,19:11,20:12,30:$V2,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),{10:[1,25]},o($Va,[2,7]),o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),o($Va,[2,12]),{11:$Vb,21:26,22:$Vc,26:28,68:27,69:29,70:$Vd,73:$Ve,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk},{10:[1,39]},{10:[1,40]},{22:[1,41]},{22:[1,42]},{12:[1,43]},{22:[1,44]},{22:[1,45]},{10:[2,97]},{10:[2,98]},{1:[2,1]},o($Va,[2,2]),{11:[1,46]},{22:[1,47]},o($Vl,[2,76],{25:[1,48]}),{11:$Vb,22:$Vm,69:49,74:$Vf,75:$Vg,76:$Vh,77:$Vi,78:$Vj,79:$Vk},o($Vn,[2,78]),{10:$Vo,22:$Vp,43:50,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:[1,62]},{10:$Vo,12:$Vz,22:$Vp,29:63,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,12:$Vz,22:$Vp,29:66,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,12:$Vz,22:$Vp,29:67,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,12:$Vz,22:$Vp,29:68,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,12:$Vz,22:$Vp,29:69,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},o($Vn,[2,88]),o($Vn,[2,89]),o($VA,$VB,{66:70,11:$VC,33:$VD}),{22:[1,73]},{10:$Vo,22:$Vp,43:74,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:75,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:76,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{10:$Vo,22:$Vp,43:89,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:91,58:[1,90],70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{12:[1,92]},{10:$Vo,12:$Vz,22:$Vp,23:93,24:$VH,27:94,29:95,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},o($Vl,[2,75]),o($Vn,[2,77]),{71:[1,96],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{10:$Vo,22:$Vp,43:114,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:115,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:116,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},o($VZ,[2,133]),o($VZ,[2,134]),o($VZ,[2,135]),o($VZ,[2,136]),o($VZ,[2,137]),o($VZ,[2,138]),o($VZ,[2,140],{26:117,21:118,22:$Vc,70:$Vd,73:$Ve}),{10:$Vo,12:$Vz,22:$Vp,29:121,43:64,70:$Vq,71:$V_,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy,113:119,116:120},o($V$,$V01,{72:122,26:123,70:$Vd,73:$Ve}),o($Vn,[2,83]),o($V11,[2,111],{78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY}),{10:$V21,14:[2,152],90:124,117:125,118:126},o($Vn,[2,84]),o($Vn,[2,85]),o($Vn,[2,86]),o($Vn,[2,87]),{25:[2,71],28:[1,129],64:128},{10:$V31,34:130,84:$V41,86:$V51,87:$V61,88:$V71},{10:$Vo,12:$Vz,22:$Vp,29:136,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:[1,139],24:[2,24],31:137,36:138},{24:[1,140],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{24:[1,141],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{7:78,8:79,10:$V1,14:[1,142],15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,37:143,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},o($V81,[2,28]),o($V81,[2,29]),o($V81,[2,30]),o($V81,[2,31]),o($V81,[2,32]),o($V81,[2,33]),o($V81,[2,34]),o($V81,[2,35]),o($V81,[2,36]),{25:[1,144]},{25:[1,145]},{10:$Vo,12:$Vz,22:$Vp,25:[1,148],29:147,41:146,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{24:[1,149],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{10:[1,150]},{11:[1,151],25:[1,152],59:153,61:$V91,62:$Va1,78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{10:$Vb1,13:156,14:[2,91],80:157,82:158},{24:[1,160]},{24:[2,16],28:[1,161]},o($Vc1,[2,19]),o($V$,$V01,{26:123,72:162,70:$Vd,73:$Ve}),{10:$Vo,22:$Vp,43:163,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:164,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:165,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:166,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:167,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:168,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:169,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:170,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:171,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:172,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:173,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:174,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:175,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:176,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:177,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},o($VZ,[2,131]),o($VZ,[2,132]),o($VZ,[2,117]),o($VZ,[2,128]),{24:[1,178],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},o($VZ,[2,139],{22:$Vm}),{22:[1,179]},{71:[1,180]},{28:[1,181],71:[2,147]},o($Vd1,[2,150]),o($V$,[2,80]),o($V$,[2,81]),{14:[1,182]},{14:[2,151],25:$Ve1,28:$Vf1,81:183},o($Vg1,[2,154]),{33:[1,186]},{25:[1,187]},{10:[1,189],65:188},{11:[1,190]},o($Vh1,$Vi1,{85:191,89:192,70:$Vj1}),o($Vh1,$Vi1,{89:192,85:194,70:$Vj1}),o($Vh1,$Vi1,{89:192,85:195,70:$Vj1}),o($Vh1,$Vi1,{89:192,85:196,70:$Vj1}),o($Vh1,$Vi1,{89:192,85:197,70:$Vj1}),o($VA,[2,100]),{24:[1,198]},{24:[2,23],28:[1,199]},{33:[1,200]},{12:[1,201]},{12:[1,202]},{47:[1,203]},o($V81,[2,27]),o($V81,[2,37]),o($V81,[2,38]),o($V81,[2,39]),{25:[1,204]},o($V81,[2,41]),{12:[1,205]},{11:[1,206],59:207,61:$V91,62:$Va1},{10:$Vo,22:$Vp,43:208,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:209,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:210,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},o($Vk1,[2,66]),o($Vk1,[2,67]),{14:[1,211]},{14:[2,90],25:$Ve1,28:$Vf1,81:212},o($Vg1,[2,93]),{33:[1,213]},{25:[1,214]},{10:$Vo,12:$Vz,22:$Vp,29:215,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},o($V$,[2,79]),o($Vl1,[2,113],{78:$VI,79:$VJ,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vl1,[2,114],{78:$VI,79:$VJ,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vm1,[2,115],{78:$VI,79:$VJ,95:$VO}),o($Vm1,[2,116],{78:$VI,79:$VJ,95:$VO}),o($VZ,[2,118]),o($Vm1,[2,119],{78:$VI,79:$VJ,95:$VO}),o($Vn1,[2,120],{78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vn1,[2,121],{78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vn1,[2,122],{78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vn1,[2,123],{78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vn1,[2,124],{78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o($Vn1,[2,125],{78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP}),o([5,9,10,11,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,61,62,71,83,103,104,106],[2,126],{78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV}),o([5,9,10,11,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,61,62,71,83,104,106],[2,127],{78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW}),{33:[1,216],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},o($VZ,[2,129]),{10:$Vo,12:$Vz,22:$Vp,23:217,24:$VH,27:94,29:95,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},o($VZ,[2,144],{114:218,115:219,70:[1,220]}),{10:$Vo,12:$Vz,22:$Vp,29:221,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},o($V11,[2,112]),{10:$V21,118:222},{10:[2,94]},{10:[2,95]},{10:$Vo,12:$Vz,22:$Vp,29:223,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},o($Vl,[2,74]),{25:[2,70],28:[1,224]},o($VA,$VB,{66:225,11:$VC,33:$VD}),{10:$Vo,12:$Vz,22:$Vp,29:226,43:64,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},o($Vh1,[2,102]),o($Vh1,[2,107],{70:[1,227]}),{71:[1,228]},o($Vh1,[2,103]),o($Vh1,[2,104]),o($Vh1,[2,105]),o($Vh1,[2,106]),{12:[1,231],32:229,33:[1,230]},{10:[1,232]},{10:$V31,34:233,84:$V41,86:$V51,87:$V61,88:$V71},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:234,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:235,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{22:[1,236]},o($V81,[2,40]),{50:237,52:238,53:$Vo1,56:[2,51]},{10:$Vo,22:$Vp,43:240,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:241,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{25:[1,242],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{25:[1,243],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{24:[1,244],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},o($Va,[2,6]),{10:$Vb1,82:245},{10:$V31,34:246,84:$V41,86:$V51,87:$V61,88:$V71},o($Vl,[2,13]),o($Vc1,[2,18]),{10:$Vo,22:$Vp,43:247,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{24:[1,248]},o($VZ,[2,142]),o($VZ,[2,143],{70:[1,249]}),{10:$Vo,12:$Vz,22:$Vp,29:121,43:64,70:$Vq,71:$V_,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy,113:250,116:120},o($Vd1,[2,149]),o($Vg1,[2,153]),o($Vg1,[2,155]),{10:[1,251]},o($VA,[2,73]),o($VA,[2,99]),{71:[1,252]},o($Vp1,[2,110]),o($Vl,[2,20]),{10:$V31,34:253,84:$V41,86:$V51,87:$V61,88:$V71},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:254,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{33:[1,255]},o($Vc1,[2,26]),{7:78,8:79,10:$V1,14:[1,256],15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,37:143,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{7:78,8:79,10:$V1,14:[1,257],15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,37:143,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{10:$Vo,22:$Vp,43:258,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{51:259,54:260,56:[1,261]},{53:$Vq1,56:[2,50]},{10:$Vo,22:$Vp,43:263,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{25:[1,264],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{24:[1,265],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{10:$Vo,22:$Vp,43:266,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{10:$Vo,22:$Vp,43:267,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{12:[1,268]},o($Vg1,[2,92]),o($Vg1,[2,96]),o([5,9,10,11,14,24,25,28,30,33,38,39,40,42,47,48,49,53,56,57,58,61,62,71,83],[2,130],{78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY}),o($VZ,[2,141]),{10:$Vo,12:$Vz,22:$Vp,29:121,43:64,70:$Vq,71:$V_,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy,113:269,116:120},{71:[1,270]},o($VA,$VB,{66:271,11:$VC,33:$VD}),o($Vp1,[2,109]),{12:[1,272]},{7:78,8:79,10:$V1,14:[1,273],15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,37:143,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{10:$V31,34:274,84:$V41,86:$V51,87:$V61,88:$V71},o($Vl,$Vr1,{44:275,45:$Vs1}),o($Vl,[2,47]),{24:[1,277],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{14:[1,278]},{14:[2,57],52:280,53:$Vo1,55:279},{33:[1,281]},{10:$Vo,22:$Vp,43:282,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{33:[1,283],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{10:$Vo,22:$Vp,43:284,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{12:[1,285]},{25:[1,286],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{24:[1,287],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:288,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{71:[1,289]},o($Vt1,[2,146]),o($VA,[2,72]),{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:290,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},o($Vl,[2,22]),o($Vc1,[2,25]),o($Vl,[2,42]),{12:[1,293],42:[1,292],46:291},{25:[1,294]},o($Vl,[2,49]),{14:[2,54]},{14:[2,56],53:$Vq1},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:295,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{33:[1,296],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:297,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{25:[1,298],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:299,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{10:$Vo,22:$Vp,43:300,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{12:[1,301]},{7:78,8:79,10:$V1,14:[1,302],15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,37:143,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},o($Vt1,[2,145]),{7:78,8:79,10:$V1,14:[1,303],15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,37:143,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},o($Vl,[2,43]),{22:[1,304]},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:305,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},o($Vl,[2,48]),o([14,53],[2,55],{67:14,7:78,8:79,15:80,16:81,17:82,18:83,19:84,20:85,37:143,10:$V1,30:$V2,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,83:$V9}),{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:306,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},o($Vu1,[2,53],{67:14,7:78,8:79,15:80,16:81,17:82,18:83,19:84,20:85,37:143,10:$V1,30:$V2,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,83:$V9}),{10:$Vo,22:$Vp,43:307,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{7:78,8:79,10:$V1,14:[1,308],15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,37:143,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{24:[1,309],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:310,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},o($Vl,[2,62]),o($Vl,[2,21]),{10:$Vo,22:$Vp,43:311,70:$Vq,92:$Vr,105:$Vs,107:$Vt,108:$Vu,109:$Vv,110:$Vw,111:$Vx,112:$Vy},{7:78,8:79,10:$V1,14:[1,312],15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,37:143,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},o($Vu1,[2,52],{67:14,7:78,8:79,15:80,16:81,17:82,18:83,19:84,20:85,37:143,10:$V1,30:$V2,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,83:$V9}),{24:[1,313],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},o($Vl,[2,61]),{12:[1,314]},{7:78,8:79,10:$V1,14:[1,315],15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,37:143,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{24:[1,316],78:$VI,79:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT,101:$VU,102:$VV,103:$VW,104:$VX,106:$VY},o($Vl,[2,46]),{12:[1,317]},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:318,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},o($Vl,[2,60]),{12:[1,319]},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:320,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{7:78,8:79,10:$V1,14:[1,321],15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,37:143,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{7:78,8:79,10:$V1,15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,35:322,37:77,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},{7:78,8:79,10:$V1,14:[1,323],15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,37:143,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},o($Vl,[2,59]),{7:78,8:79,10:$V1,14:[1,324],15:80,16:81,17:82,18:83,19:84,20:85,30:$V2,37:143,38:$VE,39:$VF,40:$VG,42:$V3,47:$V4,48:$V5,49:$V6,57:$V7,58:$V8,67:14,83:$V9},o($Vl,[2,58]),o($Vl,$Vr1,{44:325,45:$Vs1}),o($Vl,[2,45])],
defaultActions: {21:[2,97],22:[2,98],23:[2,1],184:[2,94],185:[2,95],279:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
let s = null;
  let st;
  let aux;
  let funcList = [];
  let callFunc=[];
  let table = [];
  const chalk = require('chalk');
  const deepcopy = require('deepcopy');
  var auxTable = [];
  let innerTable = [];
  let functionTable = [];
  

    const funcDec = require('./traductor/funcDec.js');
	const tAsignVariables = require('./traductor/tAsignVariables.js');
	const tId = require('./traductor/tId.js');
	const tLlamadaFunciones = require('./traductor/tLlamadaFunciones.js');
	const tOperation = require('./traductor/tOperation.js');
	const translateFunction = require('./traductor/translateFunction.js');
	const tVariables = require('./traductor/tVariables.js');
	const tReturn = require('./traductor/tReturn.js');
	const tnumber = require('./traductor/tnumber.js');
	const tminus = require('./traductor/tminus.js');
	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Comentario Linea
break;
case 1://Comentaio Multilinea
break;
case 2:return 39;
break;
case 3:return 38;
break;
case 4:return 111;
break;
case 5:return 9;
break;
case 6:return 83;
break;
case 7:return 58;
break;
case 8:return 83;
break;
case 9:return 30;
break;
case 10:return 42;
break;
case 11:return 45;
break;
case 12:return 47;
break;
case 13:return 48;
break;
case 14:return 49;
break;
case 15:return 53;
break;
case 16:return 56;
break;
case 17:return 57;
break;
case 18:return 61;
break;
case 19:return 62;
break;
case 20:return 84;
break;
case 21:return 86;
break;
case 22:return 87;
break;
case 23:return 88;
break;
case 24:return 109;
break;
case 25:return 110;
break;
case 26:return 112;
break;
case 27:return 40;
break;
case 28:return 74;
break;
case 29:return 75;
break;
case 30:return 76;
break;
case 31:return 77;
break;
case 32:return 12;
break;
case 33:return 14;
break;
case 34:return 22;
break;
case 35:return 24;
break;
case 36:return 28;
break;
case 37:return 25;
break;
case 38:return 33;
break;
case 39:return 73;
break;
case 40:return 78;
break;
case 41:return 79;
break;
case 42:return 91;
break;
case 43:return 92;
break;
case 44:return 95;
break;
case 45:return 93;
break;
case 46:return 94;
break;
case 47:return 96;
break;
case 48:return 99;
break;
case 49:return 100;
break;
case 50:return 97;
break;
case 51:return 98;
break;
case 52:return 101;
break;
case 53:return 11;
break;
case 54:return 102;
break;
case 55:return 103;
break;
case 56:return 104;
break;
case 57:return 105;
break;
case 58:return 106;
break;
case 59:return 70;
break;
case 60:return 71;
break;
case 61:
break;
case 62:
break;
case 63:
break;
case 64:
break;
case 65:return 107;
break;
case 66:return 108;
break;
case 67:return 10;
break;
case 68:return 5;
break;
case 69: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:null\b)/,/^(?:type\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:return\b)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:;)/,/^(?::)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:\s+)/,/^(?:\t+)/,/^(?:\r+)/,/^(?:\n+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:([a-zA-Z$_])[a-zA-Z0-9_$]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}